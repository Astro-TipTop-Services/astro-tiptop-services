"use strict";(self.webpackChunktiptop_site=self.webpackChunktiptop_site||[]).push([[7372],{5978:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"orion/howtosetuplaunchfile","title":"How to set up a launch script for TipTop?","description":"Run a TipTop simulation and display PSFs","source":"@site/docs/orion/howtosetuplaunchfile.mdx","sourceDirName":"orion","slug":"/orion/howtosetuplaunchfile","permalink":"/astro-tiptop-services/docs/orion/howtosetuplaunchfile","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"howtosetuplaunchfile","title":"How to set up a launch script for TipTop?","sidebar_label":"How to set up a launch script for TipTop?"},"sidebar":"tipTopSidebar","previous":{"title":"Quickstart","permalink":"/astro-tiptop-services/docs/orion/usage"},"next":{"title":"How to set up TipTop according to the AO mode?","permalink":"/astro-tiptop-services/docs/orion/howtosetup"}}');var t=i(4848),s=i(8453);const o={id:"howtosetuplaunchfile",title:"How to set up a launch script for TipTop?",sidebar_label:"How to set up a launch script for TipTop?"},l=void 0,a={},d=[{value:"Run a TipTop simulation and display PSFs",id:"run-a-tiptop-simulation-and-display-psfs",level:2},{value:"Simplest way",id:"simplest-way",level:3},{value:"More complete launch file",id:"completerunfile",level:3},{value:"Simulation Output",id:"simulation_output",level:2},{value:"OverallSimulation function documentation",id:"overallSimulation",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"run-a-tiptop-simulation-and-display-psfs",children:"Run a TipTop simulation and display PSFs"}),"\n",(0,t.jsx)(n.h3,{id:"simplest-way",children:"Simplest way"}),"\n",(0,t.jsxs)(n.p,{children:["As explained in the ",(0,t.jsx)(n.a,{href:"/astro-tiptop-services/docs/orion/usage",children:"Quickstart"})," section, to run a simulation with TipTop, you need:"]}),"\n",(0,t.jsx)(n.p,{children:"\u27a1\ufe0f a launch script which:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Loads the simulation parameters from a .ini file (e.g., minimalPar.ini)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Initializes the necessary modules"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Starts the simulation"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The simplest file to launch a simulation looks like this (",(0,t.jsx)(n.code,{children:"TIPTOP-EXAMPLE.py"}),",\r\navailable in the ",(0,t.jsx)(n.code,{children:"examples/"})," folder of our ",(0,t.jsx)(n.a,{href:"https://github.com/astro-tiptop/TIPTOP",children:"GitHub repository"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from tiptop.tiptop import *\r\n\r\noverallSimulation(\"./\", \"minimalPar\", './', 'test')\n"})}),"\n",(0,t.jsx)(n.p,{children:"where:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The first and second arguments of ",(0,t.jsx)(n.code,{children:"overallSimulation"})," are the path to the folder containing the input ",(0,t.jsx)(n.code,{children:".ini"})," file and the name of that file (without the extension)."]}),"\n",(0,t.jsxs)(n.li,{children:["The third and fourth arguments specify where to save the output results (in ",(0,t.jsx)(n.code,{children:".fits"})," format) and and the name of the resulting ",(0,t.jsx)(n.code,{children:".fits"})," file."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A detailed documentation on the ",(0,t.jsx)(n.code,{children:"overallSimulation"})," function is available ",(0,t.jsx)(n.a,{href:"/docs/orion/howtosetuplaunchfile#overallSimulation",children:(0,t.jsx)(n.strong,{children:"below"})}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"completerunfile",children:"More complete launch file"}),"\n",(0,t.jsxs)(n.p,{children:["Below is an example of a more advanced launch file. It ",(0,t.jsx)(n.strong,{children:"runs a simulation"}),"\r\nfor the ERIS instrument (see ",(0,t.jsx)(n.a,{href:"/docs/orion/aoinstruments#eris",children:(0,t.jsx)(n.strong,{children:"here"})}),") and ",(0,t.jsx)(n.strong,{children:"extracts key outputs"}),", including ",(0,t.jsx)(n.strong,{children:"PSFs"}),"\r\nand ",(0,t.jsx)(n.strong,{children:"performance metrics"})," (e.g., Strehl Ratio (SR), Full Width at Half Maximum (FWHM)) from the output ",(0,t.jsx)(n.code,{children:".fits"})," file\r\n(see ",(0,t.jsx)(n.a,{href:"/docs/orion/howtosetuplaunchfile#simulation_output",children:(0,t.jsx)(n.strong,{children:"Simulation Output"})})," below).\r\nIt also generates log-scaled intensity ",(0,t.jsx)(n.strong,{children:"plots of the PSFs"})," and a semi-logarithmic ",(0,t.jsx)(n.strong,{children:"radial profile plot"}),".",(0,t.jsx)("br",{}),"\r\n\u2705 You can adapt this script by changing the input/output paths and filenames to match your configuration.",(0,t.jsx)("br",{}),"\r\nThe full example script is available for download ",(0,t.jsxs)("a",{href:"/downloads/TIPTOP_RUN.py",download:"TIPTOP_RUN.py",children:[(0,t.jsx)(n.strong,{children:"here"}),(0,t.jsx)("span",{style:{fontSize:"1.5em"},children:"\ud83d\udce5"})]}),"."]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:(0,t.jsxs)("strong",{children:["Example run file: ",(0,t.jsx)(n.code,{children:"TIPTOP_RUN.py"})]})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'"""\r\nCreated on Mon Jun 23 10:58:33 2025\r\nRun a TIPTOP simulation and display PSFs\r\n\r\n@author: lmazzolo\r\n"""\r\n\r\n#%% Import necessary libraries\r\nfrom tiptop.tiptop import *\r\nfrom astropy.io import fits\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.colors import LogNorm\r\nimport numpy as np\r\n\r\n#%% Define input and output paths and filenames\r\n#\ud83d\udca1 You should customize these paths and filenames according to your setup\r\npath_in = "./"  # Path to the folder containing your .ini parameter file\r\npath_out = "./" # Path where output files will be saved\r\n\r\nfile_in = "ERIS_SCAO_NGS"  # Name of the input parameter file (without extension)\r\nfile_out = "ERIS_SCAO_NGS" # Name to use for the output files\r\n\r\n#%% Define a helper function to extract metrics from the FITS header\r\ndef get_metric(header, metric_name, index=0):\r\n  """\r\n  Retrieve a value from the FITS header with a formatted key.\r\n\r\n  :param header: FITS header\r\n  :param metric_name: name of the metric (e.g., \'SR\')\r\n  :param index: index of the metric (default 0)\r\n  :return: value or None if key not found\r\n  """\r\n  key = f"{metric_name}{index:04d}"\r\n  return header.get(key)\r\n\r\n#%% Run the TIPTOP simulation\r\noverallSimulation(path_in, file_in, \r\n                path_out, file_out)\r\n\r\n\r\n#%% Open the resulting FITS file and extract data \r\nwith fits.open(path_out + file_out + \'.fits\') as hdul:\r\n  hdul.info()\r\n  psf_ao = hdul[1].data[0,...] # AO-corrected PSF\r\n  psf_turb = hdul[2].data      # Seeing-limited PSF\r\n  psf_dl = hdul[3].data        # Diffraction-limited PSF\r\n  profiles = hdul[4].data      # PSF profile\r\n  \r\n  header = hdul[1].header      # FITS header for metadata\r\n\r\n  # Extract useful parameters\r\n  wvl = float(header.get("WL_NM"))       # Wavelength in nm\r\n  pix_mas = float(header.get("PIX_MAS")) # Pixel scale in milliarcseconds\r\n  sr = get_metric(header, "SR")          # Strehl ratio\r\n  fwhm = get_metric(header, "FWHM")      # FWHM in milliarcsecond\r\n\r\n  # Print key metrics\r\n  print("Pixel scale [mas]:", pix_mas)\r\n  print("Strehl Ratio:", sr)\r\n  print("FWHMs [mas]:", fwhm)\r\n\r\n#%% Normalize the PSFs so total flux = 1\r\npsf_ao /= np.sum(psf_ao)\r\npsf_dl /= np.sum(psf_dl)\r\npsf_turb /= np.sum(psf_turb)\r\n\r\n#%% Create axis in arcseconds\r\nnx = psf_ao.shape[0]\r\naxis = np.linspace(-nx//2, nx//2, nx) * pix_mas * 1e-3\r\n\r\n#%% Plot the PSFs\r\n# Compute dynamic normalization based on the AO PSF\r\npsf_max = psf_ao.max()\r\nvmax = psf_max\r\nvmin = psf_max * 1e-6  # Adjust dynamic range: show down to 1 millionth of max\r\nnorm = LogNorm(vmin=vmin, vmax=vmax) # Set log scale for display\r\n\r\nplt.figure(1, figsize=(20,5))\r\nplt.suptitle(r\'$\\lambda_{\\mathrm{science}} = %d$ nm\' % int(wvl), y=1) \r\nplt.subplots_adjust(top=0.85)\r\n\r\ndef plot_psf(psf, title, position):\r\n  """Plot a PSF in a given subplot position."""\r\n  plt.subplot(1, 3, position)\r\n  plt.imshow(psf, norm=norm, cmap=\'Spectral_r\',\r\n             extent=[axis[0], axis[-1], axis[0], axis[-1]])\r\n  plt.title(title, pad=10)\r\n  plt.xlabel(\'[arcsec]\')\r\n  if position == 1:\r\n      plt.ylabel(\'[arcsec]\', labelpad=10)\r\n  else:\r\n      plt.ylabel(\'\')\r\n  plt.colorbar(fraction=0.046)\r\n\r\nplot_psf(psf_ao, f\'AO (SR={sr*100:.1f}%, FWHM={fwhm:.1f}mas)\', 1)\r\nplot_psf(psf_dl, \'Diffraction\', 2)\r\nplot_psf(psf_turb, \'Open loop\', 3)\r\n\r\n#%% Plot the radial profile\r\nprofiles = np.squeeze(profiles)\r\nprint(f"Profile shape after squeeze: {profiles.shape}") \r\n\r\nradii = np.arange(profiles.shape[1])\r\n\r\nplt.figure(figsize=(8, 6))\r\nplt.plot(radii, profiles[1, :], label=\'AO profile\')\r\nmax_radius = radii.max()\r\nplt.xlim(0, 0.75 * max_radius)\r\nplt.xlabel(\'Radial distance (pixels)\')\r\nplt.ylabel(\'Normalized intensity\')\r\nplt.yscale("log")\r\nplt.title(f\'Radial profile - AO corrected PSF - @{int(wvl)} nm\')\r\nplt.legend()\r\nplt.grid(True)\n'})})]}),"\n",(0,t.jsxs)(n.p,{children:["\u270f\ufe0f",(0,t.jsx)(n.strong,{children:"Note:"})," Results for the different AO instruments presented ",(0,t.jsx)(n.a,{href:"/docs/orion/aoinstruments",children:(0,t.jsx)(n.strong,{children:"here"})}),"\r\nwere obtained by running this script with the corresponding provided ",(0,t.jsx)(n.code,{children:".ini"})," files."]}),"\n",(0,t.jsx)(n.h2,{id:"simulation_output",children:"Simulation Output"}),"\n",(0,t.jsxs)(n.p,{children:["The output of a TipTop simulation consists of Point Spread Functions (PSFs) computed using the parameters specified in your ",(0,t.jsx)(n.code,{children:".ini"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"doPlot"})," parameter of the overallSimulation function is set to ",(0,t.jsx)(n.code,{children:"True"}),", the following PSFs will be displayed after the simulation runs:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The AO-corrected PSF(s)"}),"\n",(0,t.jsx)(n.li,{children:"The seeing-limited PSF"}),"\n",(0,t.jsx)(n.li,{children:"The diffraction limited PSF"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These PSFs are also saved in a ",(0,t.jsx)(n.code,{children:".fits"})," file for further analysis and post-processing."]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("strong",{children:"FITS File Structure & Contents"})}),(0,t.jsx)(n.p,{children:"The FITS file contains multiple HDUs (Header/Data Units), each storing different types of data related to the PSFs generated during the simulation. The content is organized as follows:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 0 \u2013 PRIMARY"}),(0,t.jsx)("br",{}),"\r\nContains metadata about the simulation, the instrument, and observational parameters. It does not contain image data but provides essential contextual information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 1 \u2013 AO-Corrected PSF"}),(0,t.jsx)("br",{}),"\r\nStores the cube of AO-corrected PSFs as a multi-dimensional image array with dimensions (",(0,t.jsx)(n.code,{children:"FieldOfView"}),", ",(0,t.jsx)(n.code,{children:"FieldOfView"}),", ",(0,t.jsx)(n.code,{children:"Nsrc"}),", ",(0,t.jsx)(n.code,{children:"Nwvl"}),"), where ",(0,t.jsx)(n.code,{children:"FieldOfView"})," corresponds to the camera\u2019s field of view in pixels as defined in the ",(0,t.jsx)(n.code,{children:"[sensor_science]"})," section of your ",(0,t.jsx)(n.code,{children:".ini"})," file, ",(0,t.jsx)(n.code,{children:"Nsrc"})," is the number of science sources, and ",(0,t.jsx)(n.code,{children:"Nwvl"})," is the number of wavelengths specified in the ",(0,t.jsx)(n.code,{children:"Wavelength"})," parameter of the ",(0,t.jsx)(n.code,{children:"[sources_science]"})," section."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 2 \u2013 Seeing-Limited PSF"})," ",(0,t.jsx)("br",{}),"\r\nContains the seeing-limited (open-loop) PSF in a 2D image array of size (",(0,t.jsx)(n.code,{children:"FieldOfView"}),", ",(0,t.jsx)(n.code,{children:"FieldOfView"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 3 \u2013 Diffraction-Limited PSF"}),(0,t.jsx)("br",{}),"\r\nContains the diffraction-limited PSF, also stored as a 2D image array of size  (",(0,t.jsx)(n.code,{children:"FieldOfView"}),", ",(0,t.jsx)(n.code,{children:"FieldOfView"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["HDU 4 \u2013 PSDs (if ",(0,t.jsx)(n.code,{children:"savePSDs=True"}),")"]}),(0,t.jsx)("br",{}),"\r\nContains the Power Spectral Density (PSD), stored as a 3D array."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 4 or 5 \u2013 Final PSFs Radial Profiles"}),(0,t.jsx)("br",{}),"\r\nContains the 1D radial profiles of the PSFs, stored as an 3D array.",(0,t.jsx)("br",{})," \u270f\ufe0fNote: The HDU number depends on whether the PSDs are saved."]}),"\n"]}),(0,t.jsx)(n.p,{children:"Here is an example FITS structure produced with the minimalPar.ini configuration:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"No.    Name      Ver    Type      Cards   Dimensions   Format\r\n  0  PRIMARY       1 PrimaryHDU      84   ()      \r\n  1                1 ImageHDU        21   (256, 256, 1)   float64 #AO-corrected PSFs\r\n  2                1 ImageHDU        10   (256, 256)      float64 #Open-loop PSF   \r\n  3                1 ImageHDU        10   (256, 256)      float64 #Diffraction limited PSF\r\n  4                1 ImageHDU        11   (256, 256, 1)   float64 #High Order PSD (if saved)  \r\n  5                1 ImageHDU        11   (128, 1, 2)     float64 #PSFs profiles\r\n\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["\u270f\ufe0f",(0,t.jsx)(n.strong,{children:"Note:"})," Results for the different AO instruments presented ",(0,t.jsx)(n.a,{href:"/docs/orion/aoinstruments",children:(0,t.jsx)(n.strong,{children:"here"})}),"\r\n",(0,t.jsx)(n.strong,{children:"Note:"})," By default, the FITS file header includes the SR and FWHM values for each PSF (the ",(0,t.jsx)(n.code,{children:"addSrAndFwhm"}),"\r\nparameter of the ",(0,t.jsx)(n.code,{children:"overallSimulation"})," function is set to ",(0,t.jsx)(n.code,{children:"True"})," by default). ",(0,t.jsx)("br",{}),"\r\nTo retrieve and display the SR, FWHM and Encircled energy metrics  directly in your terminal, set the\r\n",(0,t.jsx)(n.code,{children:"returnMetrics"})," option to ",(0,t.jsx)(n.code,{children:"True"})," (see ",(0,t.jsx)(n.a,{href:"/docs/orion/howtosetuplaunchfile",children:(0,t.jsx)(n.strong,{children:"the documentation on the overallSimulation function"})})," below).",(0,t.jsx)("br",{}),"\r\n\u26a0\ufe0f If ",(0,t.jsx)(n.code,{children:"returnMetrics"})," is set to ",(0,t.jsx)(n.code,{children:"True"}),", the FITS file is not saved."]}),"\n",(0,t.jsx)(n.h2,{id:"overallSimulation",children:"OverallSimulation function documentation"}),"\n",(0,t.jsxs)(n.p,{children:["tiptop.",(0,t.jsx)(n.strong,{children:"overallSimulation"})," runs a complete TipTop simulation based on an input parameter file.\r\nThe function accepts several optional arguments to enable or disable specific features and select desired outputs. ",(0,t.jsx)("br",{}),"\r\nAll the parameters that can be passed as arguments are listed and explained below: ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("strong",{children:"Parameters:"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"path2param"})," (",(0,t.jsx)(n.em,{children:"str"}),") \u2013 required, path to the parameter file."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"paramFileName"})," (",(0,t.jsx)(n.em,{children:"str"}),") \u2013 required, name of the parameter file to be used without the extention."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"outpuDir"})," \u2013 required, path to the folder in which to write the output."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"doConvolve"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: True, if you want to use the natural convolution operation set to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"doPlot"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, if you want to see the result in python set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"verbose"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want all messages set this to True"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"returnRes"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, The function will return the result in the environment if set to True, else it saves the result only in a .fits file."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"returnMetrics"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, The function will return Strehl Ratio, fwhm and encircled energy within eeRadiusInMas if set to True"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"addSrAndFwhm"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: True, The function will add in the header of the fits file SR anf FWHM for each PSF."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"verbose"})," \u2013 optional default: False, If you want all messages set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"getHoErrorBreakDown"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want HO error breakdown set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ensquaredEnergy"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want ensquared energy instead of encircled energy set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"eeRadiusInMas"})," (",(0,t.jsx)(n.em,{children:"float"}),") \u2013 optional default: 50, used together with returnMetrics, radius used for the computation of the encirlced energy (if ensquaredEnergy is selected, this is half the side of the square)"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"savePSDs"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want to save PSD in the output fits file set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"saveJson"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want to save the PSF profile in a json file"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"gpuIndex"})," (",(0,t.jsx)(n.em,{children:"int"}),") \u2013 optional default: 0, Target GPU index where the simulation will be run"]}),"\n"]}),"\n"]}),(0,t.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,t.jsx)(n.strong,{children:"Note:"})," if ",(0,t.jsx)(n.code,{children:"returnMetrics"})," is set to ",(0,t.jsx)(n.code,{children:"True"}),", the FITS file is not saved."]})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);