"use strict";(self.webpackChunktiptop_site=self.webpackChunktiptop_site||[]).push([[7372],{5978:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"orion/howtosetuplaunchfile","title":"Set Up a Launch Script for TipTop and Display Results","description":"Run a TipTop simulation and display PSFs","source":"@site/docs/orion/howtosetuplaunchfile.mdx","sourceDirName":"orion","slug":"/orion/howtosetuplaunchfile","permalink":"/astro-tiptop-services/docs/orion/howtosetuplaunchfile","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"howtosetuplaunchfile","title":"Set Up a Launch Script for TipTop and Display Results","sidebar_label":"Set Up a Launch Script for TipTop and Display Results"},"sidebar":"tipTopSidebar","previous":{"title":"Quickstart","permalink":"/astro-tiptop-services/docs/orion/usage"},"next":{"title":"Set Up TipTop According to the OA Mode","permalink":"/astro-tiptop-services/docs/orion/howtosetup"}}');var t=r(4848),s=r(8453),o=r(9030);const l={id:"howtosetuplaunchfile",title:"Set Up a Launch Script for TipTop and Display Results",sidebar_label:"Set Up a Launch Script for TipTop and Display Results"},a=void 0,d={},c=[{value:"Run a TipTop simulation and display PSFs",id:"run-a-tiptop-simulation-and-display-psfs",level:2},{value:"Simplest way",id:"simplest-way",level:3},{value:"More complete launch script",id:"completerunfile",level:3},{value:"More complete display script",id:"completedisplayfile",level:3},{value:"Simulation Output",id:"simulation_output",level:2},{value:"OverallSimulation function documentation",id:"overallSimulation",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"run-a-tiptop-simulation-and-display-psfs",children:"Run a TipTop simulation and display PSFs"}),"\n",(0,t.jsx)(n.h3,{id:"simplest-way",children:"Simplest way"}),"\n",(0,t.jsxs)(n.p,{children:["As explained in the ",(0,t.jsx)(n.a,{href:"/astro-tiptop-services/docs/orion/usage",children:"Quickstart"})," section, to run a simulation with TipTop, you need:"]}),"\n",(0,t.jsx)(n.p,{children:"\u27a1\ufe0f a launch script which:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Loads the simulation parameters from a .ini file (e.g., minimalPar.ini)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Initializes the necessary modules"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Starts the simulation"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The simplest file to launch a simulation looks like this (",(0,t.jsx)(n.code,{children:"TIPTOP-EXAMPLE.py"}),",\r\navailable in the ",(0,t.jsx)(n.code,{children:"examples/"})," folder of our ",(0,t.jsx)(n.a,{href:"https://github.com/astro-tiptop/TIPTOP",children:"GitHub repository"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from tiptop.tiptop import *\r\n\r\noverallSimulation(\"./\", \"minimalPar\", './', 'test')\n"})}),"\n",(0,t.jsx)(n.p,{children:"where:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The first and second arguments of ",(0,t.jsx)(n.code,{children:"overallSimulation"})," are the path to the folder containing the input ",(0,t.jsx)(n.code,{children:".ini"})," file and the name of that file (without the extension)."]}),"\n",(0,t.jsxs)(n.li,{children:["The third and fourth arguments specify where to save the output results (in ",(0,t.jsx)(n.code,{children:".fits"})," format) and and the name of the resulting ",(0,t.jsx)(n.code,{children:".fits"})," file."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A detailed documentation on the ",(0,t.jsx)(n.code,{children:"overallSimulation"})," function is available ",(0,t.jsx)(n.a,{href:"/docs/orion/howtosetuplaunchfile#overallSimulation",children:(0,t.jsx)(n.strong,{children:"below"})}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"completerunfile",children:"More complete launch script"}),"\n",(0,t.jsxs)("div",{style:{textAlign:"justify"},children:[(0,t.jsxs)(n.p,{children:["Below is an example of a more advanced launch script (suitable for ",(0,t.jsx)("span",{style:{color:"rgb(30, 120, 255)"},children:(0,t.jsx)(n.strong,{children:"a single science source"})}),").\r\nIt ",(0,t.jsx)(n.strong,{children:"runs a simulation"})," for the ",(0,t.jsx)(n.a,{href:"/docs/orion/aoinstruments#eris",children:(0,t.jsx)(n.strong,{children:"ERIS instrument"})})," and\r\n",(0,t.jsx)(n.strong,{children:"extracts key outputs"}),", including ",(0,t.jsx)(n.strong,{children:"PSFs"})," and ",(0,t.jsx)(n.strong,{children:"performance metrics"})," (e.g., Strehl Ratio (SR),\r\nFull Width at Half Maximum (FWHM)) from the output FITS file (see ",(0,t.jsx)(n.a,{href:"/docs/orion/howtosetuplaunchfile#simulation_output",children:(0,t.jsx)(n.strong,{children:"Simulation Output"})})," below).\r\nIt also generates log-scaled intensity plots of the ",(0,t.jsx)(n.strong,{children:"AO PSF"}),", ",(0,t.jsx)(n.strong,{children:"diffraction limited PSF"}),", and ",(0,t.jsx)(n.strong,{children:"seeing limited PSF"}),", as well as a log-scaled ",(0,t.jsx)(n.strong,{children:"radial profile plot"}),".",(0,t.jsx)("br",{}),"\r\n\u2705 You can adapt this script by changing the input/output paths and filenames to match your configuration.",(0,t.jsx)("br",{}),"\r\nThe full example script is available for download\r\n",(0,t.jsxs)("a",{href:`${(0,o.Ay)("/downloads/TIPTOP_RUN_DISPLAY.py")}`,download:"TIPTOP_RUN_DISPLAY.py",children:[(0,t.jsx)(n.strong,{children:"here"}),(0,t.jsx)("span",{style:{fontSize:"1.5em"},children:"\ud83d\udce5"})]}),"."]}),(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsxs)("strong",{children:["Example run and display script for a single science source: ",(0,t.jsx)(n.code,{children:"TIPTOP_RUN_DISPLAY.py"})]})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'"""\r\nCreated on Mon Jun 23 10:58:33 2025\r\nRun a TIPTOP simulation and display PSFs\r\n\r\n@author: astro-tiptop-services\r\n"""\r\n\r\n#%% Import necessary libraries\r\nfrom tiptop.tiptop import *\r\nfrom astropy.io import fits\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.colors import LogNorm\r\nimport numpy as np\r\n\r\n#%% Define input and output paths and filenames\r\n#\ud83d\udca1 You should customize these paths and filenames according to your setup\r\npath_in = "./"  # Path to the folder containing your .ini parameter file\r\npath_out = "./" # Path where output files will be saved\r\n\r\nfile_in = "ERIS_SCAO_NGS"  # Name of the input parameter file (without extension)\r\nfile_out = "ERIS_SCAO_NGS" # Name to use for the output files\r\n\r\n#%% Define a helper function to extract metrics from the FITS header\r\ndef get_metric(header, metric_name, index=0):\r\n    """\r\n    Retrieve a value from the FITS header with a formatted key.\r\n\r\n    :param header: FITS header\r\n    :param metric_name: name of the metric (e.g., \'SR\')\r\n    :param index: index of the metric (default 0)\r\n    :return: value or None if key not found\r\n    """\r\n    key = f"{metric_name}{index:04d}"\r\n    return header.get(key)\r\n\r\n#%% Run the TIPTOP simulation\r\noverallSimulation(path_in, file_in, \r\n                path_out, file_out)\r\n\r\n\r\n#%% Open the resulting FITS file and extract data \r\nwith fits.open(path_out + file_out + \'.fits\') as hdul:\r\n    hdul.info()\r\n    psf_ao = hdul[1].data[0,...] # AO-corrected PSF\r\n    psf_turb = hdul[2].data      # Seeing-limited PSF\r\n    psf_dl = hdul[3].data        # Diffraction-limited PSF\r\n    profiles = hdul[4].data      # PSF profile\r\n    \r\n    header = hdul[1].header      # FITS header for metadata\r\n\r\n    # Extract useful parameters\r\n    wvl = float(header.get("WL_NM"))       # Wavelength in nm\r\n    pix_mas = float(header.get("PIX_MAS")) # Pixel scale in milliarcseconds\r\n    sr = get_metric(header, "SR")          # Strehl ratio\r\n    fwhm = get_metric(header, "FWHM")      # FWHM in milliarcsecond\r\n\r\n    # Print key metrics\r\n    print("Pixel scale [mas]:", pix_mas)\r\n    print("Strehl Ratio:", sr)\r\n    print("FWHMs [mas]:", fwhm)\r\n\r\n#%% Normalize the PSFs so total flux = 1\r\npsf_ao /= np.sum(psf_ao)\r\npsf_dl /= np.sum(psf_dl)\r\npsf_turb /= np.sum(psf_turb)\r\n\r\n#%% Create axis in arcseconds\r\nnx = psf_ao.shape[0]\r\naxis = np.linspace(-nx//2, nx//2, nx) * pix_mas * 1e-3\r\n\r\n#%% Plot the PSFs\r\n# Compute dynamic normalization based on the AO PSF\r\npsf_max = psf_ao.max()\r\nvmax = psf_max\r\nvmin = psf_max * 1e-6  # Adjust dynamic range: show down to 1 millionth of max\r\nnorm = LogNorm(vmin=vmin, vmax=vmax) # Set log scale for display\r\n\r\nplt.figure(1, figsize=(20,5))\r\nplt.suptitle(r\'$\\lambda_{\\mathrm{science}} = %d$ nm\' % int(wvl), y=1) \r\nplt.subplots_adjust(top=0.85)\r\n\r\ndef plot_psf(psf, title, position):\r\n    """Plot a PSF in a given subplot position."""\r\n    plt.subplot(1, 3, position)\r\n    plt.imshow(psf, norm=norm, cmap=\'Spectral_r\',\r\n            extent=[axis[0], axis[-1], axis[0], axis[-1]])\r\n    plt.title(title, pad=10)\r\n    plt.xlabel(\'[arcsec]\')\r\n    if position == 1:\r\n        plt.ylabel(\'[arcsec]\', labelpad=10)\r\n    else:\r\n        plt.ylabel(\'\')\r\n    plt.colorbar(fraction=0.046)\r\n\r\nplot_psf(psf_ao, f\'AO (SR={sr*100:.1f}%, FWHM={fwhm:.1f}mas)\', 1)\r\nplot_psf(psf_dl, \'Diffraction\', 2)\r\nplot_psf(psf_turb, \'Open loop\', 3)\r\n\r\n#%% Plot the radial profile\r\nradii = profiles[0,0,:]\r\n\r\nplt.figure(figsize=(8, 6))\r\nplt.plot(radii, profiles[1,0,:], label=\'AO profile\')\r\nmax_radius = radii.max()\r\nplt.xlim(0, 0.75 * max_radius)\r\nplt.xlabel(\'Radial distance (mas)\')\r\nplt.ylabel(\'Normalized intensity\')\r\nplt.yscale("log")\r\nplt.title(f\'Radial profile - AO corrected PSF - @{int(wvl)} nm\')\r\nplt.legend()\r\nplt.grid(True, which=\'both\', linestyle=\'--\', linewidth=0.5, color=\'gray\', alpha=0.7)\n'})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"completedisplayfile",children:"More complete display script"}),"\n",(0,t.jsxs)("div",{style:{textAlign:"justify"},children:[(0,t.jsxs)(n.p,{children:["Below is an example of a more complete display script (suitable for ",(0,t.jsx)("span",{style:{color:"rgb(30, 120, 255)"},children:(0,t.jsx)(n.strong,{children:"multiple science sources"})}),").\r\nIt ",(0,t.jsx)(n.strong,{children:"loads the generated FITS file"})," obtained after running TipTop \u2014 in this case, for the\r\n",(0,t.jsx)(n.a,{href:"/docs/orion/aoinstruments#morfeo",children:(0,t.jsx)(n.strong,{children:"MORFEO instrument"})}),". It extracts the ",(0,t.jsx)(n.strong,{children:"PSFs"})," and ",(0,t.jsx)(n.strong,{children:"performance\r\nmetrics"})," such as Strehl Ratio (SR) and Full Width at Half Maximum (FWHM), for each science source.\r\nIt also recomputes SR and FWHM from the PSF data to enable consistency checks with the stored header\r\nvalues. ",(0,t.jsx)("br",{}),"\r\nThis script then displays the ",(0,t.jsx)(n.strong,{children:"AO PSFs"})," in a log-scaled ",(0,t.jsx)(n.strong,{children:"grid layout"}),", annotated with zenith/azimuth\r\ncoordinates and performance metrics, allowing for quick visual assessment of PSF quality across the field.\r\nIn addition, it plots the normalized ",(0,t.jsx)(n.strong,{children:"radial PSF profiles"})," in log-log scale for all sources.",(0,t.jsx)("br",{}),"\r\n\u2705 You can adapt this script to your own simulation results by modifying the file names and paths.",(0,t.jsx)("br",{}),"\r\nThe full example script is available for download\r\n",(0,t.jsxs)("a",{href:`${(0,o.Ay)("/downloads/TIPTOP_DISPLAY.py")}`,download:"TIPTOP_DISPLAY.py",children:[(0,t.jsx)(n.strong,{children:"here"}),(0,t.jsx)("span",{style:{fontSize:"1.5em"},children:"\ud83d\udce5"})]}),"."]}),(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsxs)("strong",{children:["Example display script for multiple science sources: ",(0,t.jsx)(n.code,{children:"TIPTOP_DISPLAY.py"})]})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\"\"\"\r\nCreated on Wed Jul 09 10:50:35 2025\r\nDisplay multiple AO PSFs in a grid\r\n\r\n@author: astro-tiptop-services\r\n\"\"\"\r\n\r\n#%% =============================================================================\r\n# Import necessary libraries\r\nfrom tiptop.tiptop import *\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.colors as mcolors\r\n\r\n#%% =============================================================================\r\n# Define input and output paths\r\n#\ud83d\udca1 Adapt these paths to your environment\r\npath_in = \"./\"    # Folder containing the .ini parameter file\r\npath_out = \"./\"   # Folder containing the output FITS file \r\n\r\ninTag = \"MORFEO\"  # Name of the input parameter file (without extension)\r\noutTag = \"MORFEO\" # Name of the output FITS file\r\n\r\ninputFile = f\"{path_in}{inTag}.ini\"\r\noutputFile = f\"{path_out}{outTag}.fits\"\r\n\r\n#%% =============================================================================\r\n# Load AO system and compute key parameters\r\nao = aoSystem(inputFile)\r\nwvl = ao.src.wvl[0]  # Science wavelength\r\nrad2mas = 3600 * 180 * 1000 / np.pi # Convert radians to milliarcseconds\r\npixel_scale_mas = ao.cam.psInMas\r\nsampRef = wvl * rad2mas / (pixel_scale_mas*2*ao.tel.R) # Sampling reference\r\n\r\n#%% =============================================================================\r\n# Load FITS file and extract PSFs and metadata\r\nhdul = fits.open(path_out + outTag + '.fits')\r\n\r\n# Extract header and map dictionary\r\nheader = hdul[0].header \r\nmap_dictionary = hdr2map(header)\r\n\r\n# Extract SR and FWHM values from header\r\npsf = hdul[1].data\r\npsf_header = hdul[1].header \r\nn_psf = len(psf)\r\n\r\n# Extract SR and FWHM values from the header of the PSF HDU\r\nsr_list = [psf_header[f\"SR{str(i).zfill(4)}\"] for i in range(n_psf)]\r\nfwhm_list = [psf_header[f\"FWHM{str(i).zfill(4)}\"] for i in range(n_psf)]\r\n\r\n# Load PSF profiles (can be in HDU 4 or 5 depending on save options)\r\nheader4 = hdul[4].header\r\nprofile = hdul[4].data if header4.get('CONTENT') == 'Final PSFs profiles' else hdul[5].data\r\n\r\n#%% =============================================================================\r\n# Compare header SR/FWHM values with computed values\r\nprint('Compare SR and FWHM from header with computed values:')\r\nfor i in range(n_psf):\r\n    zenith = map_dictionary['sources_science']['Zenith'][i]\r\n    azimuth= map_dictionary['sources_science']['Azimuth'][i]\r\n    print(f'Zenith: {zenith}, Azimuth: {azimuth}')\r\n    sr_comp = FourierUtils.getStrehl(psf[i], ao.tel.pupil, sampRef, method='otf')\r\n    fwhm_comp = FourierUtils.getFWHM(psf[i], ao.cam.psInMas, nargout=1)\r\n    print(f'     SR (computed)   : {sr_comp:.5f}')\r\n    print(f'     SR (from header): {sr_list[i]:.5f}')\r\n    print(f'     FWHM (computed) : {fwhm_comp:.5f}')\r\n    print(f'     FWHM (from hdr) : {fwhm_list[i]:.5f}')\r\n\r\n#%% =============================================================================\r\n# Display PSFs in a square grid\r\n# => grid is made by same number of rows and columns\r\nmax_display = int(np.floor(np.sqrt(n_psf))) ** 2  \r\nn_rows = int(np.sqrt(max_display))\r\nn_cols = n_rows\r\n\r\ncrop_size = 4\r\nnx = FourierUtils.cropSupport(psf[0], crop_size).shape[0]\r\naxis = np.linspace(-nx//2, nx//2, nx) * pixel_scale_mas * 1e-3\r\n\r\nfig, axs = plt.subplots(n_rows, n_cols, figsize=(12, 12), constrained_layout=True)\r\nfor i in range(max_display):\r\n    ax = axs.flat[i]\r\n    zenith = float(map_dictionary['sources_science']['Zenith'][i])\r\n    azimuth = float(map_dictionary['sources_science']['Azimuth'][i])\r\n    img = ax.imshow(FourierUtils.cropSupport(psf[i], crop_size),\r\n                    cmap='Spectral_r',\r\n                    extent=[axis[0], axis[-1], axis[0], axis[-1]],\r\n                    norm=mcolors.LogNorm(vmin=np.max(psf)*1e-4,\r\n                                        vmax=np.max(psf)))\r\n    ax.text(0.05, 0.05,\r\n        f'Distance:{zenith:.0f}\", Angle:{azimuth:.0f}\xb0\\nSR:{sr_list[i]*100:.1f}%, FWHM:{fwhm_list[i]:.1f} mas',\r\n        color='white', fontsize=9, transform=ax.transAxes,\r\n        bbox=dict(facecolor='black', alpha=0.5, lw=0))\r\n    if i % n_cols == 0:\r\n        ax.set_ylabel('Arcsec', fontsize=10)\r\n    else:\r\n        ax.set_yticks([])\r\n    if i // n_cols == n_rows - 1:\r\n        ax.set_xlabel('Arcsec', fontsize=10)\r\n    else:\r\n        ax.set_xticks([])\r\n    # Set tick parameters\r\n    ax.tick_params(labelsize=10, color='white')\r\n    # Add a small colorbar to the right of each subplot\r\n    cbar = plt.colorbar(img, ax=ax, fraction=0.046, pad=0.01)\r\n    cbar.ax.tick_params(labelsize=6)\r\n\r\n#%% =============================================================================\r\n# Plot normalized PSF profiles in log-log scale\r\nplt.figure(figsize=(10, 8))\r\ncolors = plt.cm.tab20(np.linspace(0, 1, n_psf))\r\n\r\nfor i in range(n_psf):\r\n    zenith = float(map_dictionary['sources_science']['Zenith'][i])\r\n    azimuth = float(map_dictionary['sources_science']['Azimuth'][i])\r\n    y_norm = profile[1,i,:] / np.max(profile[1,i,:])\r\n    x = profile[0,i,:]\r\n    plt.plot(x, y_norm, label=f'Zen: {zenith:.1f}\", Azi: {azimuth:.1f}\xb0',\r\n            color=colors[i], linewidth=1.5)\r\nplt.xscale('log')\r\nplt.yscale('log')\r\nplt.xlabel('Distance [mas]', fontsize=12)\r\nplt.ylabel('PSF profile norm. to max', fontsize=12)\r\nplt.title('PSF Profiles', fontsize=14)\r\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, color='gray', alpha=0.7)\r\nplt.legend(loc='lower left',  fontsize=10, ncol=2)\r\nplt.tight_layout()\r\nplt.show()\n"})})]}),(0,t.jsxs)(n.p,{children:["\u270f\ufe0f",(0,t.jsx)(n.strong,{children:"Note:"})," Results for the different AO instruments presented ",(0,t.jsx)(n.a,{href:"/docs/orion/aoinstruments",children:(0,t.jsx)(n.strong,{children:"here"})}),"\r\nwere obtained by running the previous two scripts with the corresponding provided ",(0,t.jsx)(n.code,{children:".ini"})," files."]})]}),"\n",(0,t.jsx)(n.h2,{id:"simulation_output",children:"Simulation Output"}),"\n",(0,t.jsxs)(n.p,{children:["The output of a TipTop simulation consists of Point Spread Functions (PSFs) computed using the parameters specified in your ",(0,t.jsx)(n.code,{children:".ini"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"doPlot"})," parameter of the overallSimulation function is set to ",(0,t.jsx)(n.code,{children:"True"}),", the following PSFs will be displayed after the simulation runs:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The AO-corrected PSF(s)"}),"\n",(0,t.jsx)(n.li,{children:"The seeing-limited PSF"}),"\n",(0,t.jsx)(n.li,{children:"The diffraction limited PSF"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These PSFs are also saved in a ",(0,t.jsx)(n.code,{children:".fits"})," file for further analysis and post-processing."]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("strong",{children:"FITS File Structure & Contents"})}),(0,t.jsx)(n.p,{children:"The FITS file contains multiple HDUs (Header/Data Units), each storing different types of data related to the PSFs generated during the simulation. The content is organized as follows:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 0 \u2013 PRIMARY"}),(0,t.jsx)("br",{}),"\r\nContains metadata about the simulation, the instrument, and observational parameters. It does not contain image data but provides essential contextual information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 1 \u2013 AO-Corrected PSF"}),(0,t.jsx)("br",{}),"\r\nStores the cube of AO-corrected PSFs as a multi-dimensional image array with dimensions (",(0,t.jsx)(n.code,{children:"FieldOfView"}),", ",(0,t.jsx)(n.code,{children:"FieldOfView"}),", ",(0,t.jsx)(n.code,{children:"Nsrc"}),", ",(0,t.jsx)(n.code,{children:"Nwvl"}),"), where ",(0,t.jsx)(n.code,{children:"FieldOfView"})," corresponds to the camera\u2019s field of view in pixels as defined in the ",(0,t.jsx)(n.code,{children:"[sensor_science]"})," section of your ",(0,t.jsx)(n.code,{children:".ini"})," file, ",(0,t.jsx)(n.code,{children:"Nsrc"})," is the number of science sources, and ",(0,t.jsx)(n.code,{children:"Nwvl"})," is the number of wavelengths specified in the ",(0,t.jsx)(n.code,{children:"Wavelength"})," parameter of the ",(0,t.jsx)(n.code,{children:"[sources_science]"})," section."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 2 \u2013 Seeing-Limited PSF"})," ",(0,t.jsx)("br",{}),"\r\nContains the seeing-limited (open-loop) PSF in a 2D image array of size (",(0,t.jsx)(n.code,{children:"FieldOfView"}),", ",(0,t.jsx)(n.code,{children:"FieldOfView"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 3 \u2013 Diffraction-Limited PSF"}),(0,t.jsx)("br",{}),"\r\nContains the diffraction-limited PSF, also stored as a 2D image array of size  (",(0,t.jsx)(n.code,{children:"FieldOfView"}),", ",(0,t.jsx)(n.code,{children:"FieldOfView"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["HDU 4 \u2013 PSDs (if ",(0,t.jsx)(n.code,{children:"savePSDs=True"}),")"]}),(0,t.jsx)("br",{}),"\r\nContains the Power Spectral Density (PSD), stored as a 3D array."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HDU 4 or 5 \u2013 Final PSFs Radial Profiles"}),(0,t.jsx)("br",{}),"\r\nContains the 1D radial profiles of the PSFs, stored as an 3D array.",(0,t.jsx)("br",{})," \u270f\ufe0fNote: The HDU number depends on whether the PSDs are saved."]}),"\n"]}),(0,t.jsx)(n.p,{children:"Here is an example FITS structure produced with the minimalPar.ini configuration:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"No.    Name      Ver    Type      Cards   Dimensions   Format\r\n  0  PRIMARY       1 PrimaryHDU      84   ()      \r\n  1                1 ImageHDU        21   (256, 256, 1)   float64 #AO-corrected PSFs\r\n  2                1 ImageHDU        10   (256, 256)      float64 #Open-loop PSF   \r\n  3                1 ImageHDU        10   (256, 256)      float64 #Diffraction limited PSF\r\n  4                1 ImageHDU        11   (256, 256, 1)   float64 #High Order PSD (if saved)  \r\n  5                1 ImageHDU        11   (128, 1, 2)     float64 #PSFs profiles\r\n\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["\u270f\ufe0f",(0,t.jsx)(n.strong,{children:"Note:"})," Results for the different AO instruments presented ",(0,t.jsx)(n.a,{href:"/docs/orion/aoinstruments",children:(0,t.jsx)(n.strong,{children:"here"})}),"\r\n",(0,t.jsx)(n.strong,{children:"Note:"})," By default, the FITS file header includes the SR and FWHM values for each PSF (the ",(0,t.jsx)(n.code,{children:"addSrAndFwhm"}),"\r\nparameter of the ",(0,t.jsx)(n.code,{children:"overallSimulation"})," function is set to ",(0,t.jsx)(n.code,{children:"True"})," by default). ",(0,t.jsx)("br",{}),"\r\nTo retrieve and display the SR, FWHM and Encircled energy metrics  directly in your terminal, set the\r\n",(0,t.jsx)(n.code,{children:"returnMetrics"})," option to ",(0,t.jsx)(n.code,{children:"True"})," (see ",(0,t.jsx)(n.a,{href:"/docs/orion/howtosetuplaunchfile",children:(0,t.jsx)(n.strong,{children:"the documentation on the overallSimulation function"})})," below).",(0,t.jsx)("br",{}),"\r\n\u26a0\ufe0f If ",(0,t.jsx)(n.code,{children:"returnMetrics"})," is set to ",(0,t.jsx)(n.code,{children:"True"}),", the FITS file is not saved."]}),"\n",(0,t.jsx)(n.h2,{id:"overallSimulation",children:"OverallSimulation function documentation"}),"\n",(0,t.jsxs)(n.p,{children:["tiptop.",(0,t.jsx)(n.strong,{children:"overallSimulation"})," runs a complete TipTop simulation based on an input parameter file.\r\nThe function accepts several optional arguments to enable or disable specific features and select desired outputs. ",(0,t.jsx)("br",{}),"\r\nAll the parameters that can be passed as arguments are listed and explained below: ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("strong",{children:"Parameters:"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"path2param"})," (",(0,t.jsx)(n.em,{children:"str"}),") \u2013 required, path to the parameter file."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"paramFileName"})," (",(0,t.jsx)(n.em,{children:"str"}),") \u2013 required, name of the parameter file to be used without the extention."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"outpuDir"})," \u2013 required, path to the folder in which to write the output."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"doConvolve"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: True, if you want to use the natural convolution operation set to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"doPlot"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, if you want to see the result in python set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"verbose"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want all messages set this to True"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"returnRes"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, The function will return the result in the environment if set to True, else it saves the result only in a .fits file."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"returnMetrics"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, The function will return Strehl Ratio, fwhm and encircled energy within eeRadiusInMas if set to True"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"addSrAndFwhm"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: True, The function will add in the header of the fits file SR anf FWHM for each PSF."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"verbose"})," \u2013 optional default: False, If you want all messages set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"getHoErrorBreakDown"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want HO error breakdown set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ensquaredEnergy"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want ensquared energy instead of encircled energy set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"eeRadiusInMas"})," (",(0,t.jsx)(n.em,{children:"float"}),") \u2013 optional default: 50, used together with returnMetrics, radius used for the computation of the encirlced energy (if ensquaredEnergy is selected, this is half the side of the square)"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"savePSDs"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want to save PSD in the output fits file set this to True."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"saveJson"})," (",(0,t.jsx)(n.em,{children:"bool"}),") \u2013 optional default: False, If you want to save the PSF profile in a json file"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"gpuIndex"})," (",(0,t.jsx)(n.em,{children:"int"}),") \u2013 optional default: 0, Target GPU index where the simulation will be run"]}),"\n"]}),"\n"]}),(0,t.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,t.jsx)(n.strong,{children:"Note:"})," if ",(0,t.jsx)(n.code,{children:"returnMetrics"})," is set to ",(0,t.jsx)(n.code,{children:"True"}),", the FITS file is not saved."]})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(6540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);