"use strict";(self.webpackChunktiptop_site=self.webpackChunktiptop_site||[]).push([[4313],{831:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"aquila/tuto_ast_select","title":"TipTop Asterism Selection \u2014 Hands-on Tutorial (VS Code / Jupyter)","description":"This page walks you through a Jupyter Notebook shows how to run asterismSelection with TipTop, inspecting and save metrics, reload results later without recomputing, and (optionally) train a heuristic model for fast ranking.","source":"@site/docs/aquila/tuto_ast_select.mdx","sourceDirName":"aquila","slug":"/aquila/tuto_ast_select","permalink":"/astro-tiptop-services/docs/aquila/tuto_ast_select","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"tuto_ast_select","title":"TipTop Asterism Selection \u2014 Hands-on Tutorial (VS Code / Jupyter)","sidebar_label":"Tutorial - Asterism Selection"},"sidebar":"tipTopSidebar","previous":{"title":"Heuristic models","permalink":"/astro-tiptop-services/docs/aquila/heuristic_models"},"next":{"title":"Overview","permalink":"/astro-tiptop-services/docs/lyra/overview"}}');var i=r(4848),t=r(8453),o=r(9030);const l={id:"tuto_ast_select",title:"TipTop Asterism Selection \u2014 Hands-on Tutorial (VS Code / Jupyter)",sidebar_label:"Tutorial - Asterism Selection"},a=void 0,d={},c=[{value:"0) Prerequisites",id:"0-prerequisites",level:2},{value:"1) Choose your configuration",id:"1-choose-your-configuration",level:2},{value:"(Optional) List available <code>.ini</code> files",id:"optional-list-available-ini-files",level:3},{value:"2) Run the asterism selection",id:"2-run-the-asterism-selection",level:2},{value:"3) Summarize per field + (optional) JSON export",id:"3-summarize-per-field--optional-json-export",level:2},{value:"What it does",id:"what-it-does",level:3},{value:"Multi-mode note (e.g., MAVIS)",id:"multi-mode-note-eg-mavis",level:3},{value:"4) Run <code>tiptop.overallSimulation</code> on the best asterism",id:"4-run-tiptopoverallsimulation-on-the-best-asterism",level:2},{value:"What this cell does",id:"what-this-cell-does",level:3},{value:"Read the metrics written by <code>overallSimulation</code> (from the FITS)",id:"read-the-metrics-written-by-overallsimulation-from-the-fits",level:3},{value:"Visualize the AO PSFs (grid + SR/FWHM labels)",id:"visualize-the-ao-psfs-grid--srfwhm-labels",level:3},{value:"4) Reload previously computed metrics",id:"4-reload-previously-computed-metrics",level:2},{value:"5) (Optional) Train &amp; test a heuristic model",id:"5-optional-train--test-a-heuristic-model",level:2},{value:"What this cell does",id:"what-this-cell-does-1",level:3},{value:"How to reuse the model",id:"how-to-reuse-the-model",level:3},{value:"Inputs to keep consistent",id:"inputs-to-keep-consistent",level:3},{value:"Notes &amp; tips",id:"notes--tips",level:3}];function p(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)("p",{align:"justify",children:[(0,i.jsxs)(n.p,{children:["This page walks you through a Jupyter Notebook shows how to run ",(0,i.jsx)(n.code,{children:"asterismSelection"})," with ",(0,i.jsx)(n.strong,{children:"TipTop"}),", inspecting and save metrics, reload results later without recomputing, and (optionally) train a ",(0,i.jsx)(n.strong,{children:"heuristic model"})," for fast ranking."]}),(0,i.jsx)(n.p,{children:"It\u2019s meant as a practical guide: pick the parts you need\u2014no need to follow every step end-to-end."})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Download the full Notebook:"}),"\r\n",(0,i.jsxs)("a",{href:`${(0,o.Ay)("/downloads/TIPTOP_Asterism_Selection_Tutorial.ipynb")}`,download:"TIPTOP_Asterism_Selection_Tutorial.ipynb",children:[(0,i.jsx)(n.strong,{children:"here"}),(0,i.jsx)("span",{style:{fontSize:"1.5em"},children:"\ud83d\udce5"})]}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mono"})," (ERIS) vs. ",(0,i.jsx)(n.strong,{children:"Multi"})," (MAVIS)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ERIS (mono): 1 star per asterism"}),"\n",(0,i.jsx)(n.li,{children:"MAVIS (multi): 3 stars per asterism"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"What you'll learn"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Point ",(0,i.jsx)(n.strong,{children:"TipTop"})," to an ",(0,i.jsx)(n.code,{children:".ini"})," file with ",(0,i.jsx)(n.code,{children:"[ASTERISM_SELECTION]"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Run ",(0,i.jsx)(n.code,{children:"tiptop.asterismSelection(...)"})," and interpret outputs."]}),"\n",(0,i.jsxs)(n.li,{children:["Rank and print the ",(0,i.jsx)(n.strong,{children:"best asterism per field"})," (with optionnal JSON export)."]}),"\n",(0,i.jsxs)(n.li,{children:["Run ",(0,i.jsx)(n.code,{children:"tiptop.overallSimulation(...)"})," on the global best asterism."]}),"\n",(0,i.jsxs)(n.li,{children:["Reload metrics later via ",(0,i.jsx)(n.strong,{children:"reloadAsterismSelection(...)"})," (no recomputation)."]}),"\n",(0,i.jsxs)(n.li,{children:["(Optional) Train/test a ",(0,i.jsx)(n.strong,{children:"heuristic model"})," for fast ranking (splines for mono, NN for multi)."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"What this notebook saves"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Arrays/metrucs in your ",(0,i.jsx)(n.code,{children:"OUTPUT_DIR"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Optional ",(0,i.jsx)(n.strong,{children:"JSON"})," snapshots of the best (or all) asterisms, including the star inputs (",(0,i.jsx)(n.em,{children:"zenith, azimuth, photons, freq"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Optional heuristic model files (",(0,i.jsx)(n.code,{children:".npy"}),"/ ",(0,i.jsx)(n.code,{children:".pth"}),") when training is enabled."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"0-prerequisites",children:"0) Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Python 3.11+ recommended"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"astro-tiptop"})," version 1.3.25 or higher"]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"check-environment",children:"Check environment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import os, sys, platform, time, json\r\nprint('Python:', sys.version.split()[0], '| Platform:', platform.platform())\r\nprint('CWD   :', os.getcwd())\n"})}),"\n",(0,i.jsx)(n.h2,{id:"1-choose-your-configuration",children:"1) Choose your configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Set the variables below to point to one of your ",(0,i.jsx)(n.code,{children:".ini"})," files in ",(0,i.jsx)(n.code,{children:"astTest/"})," (or elsewhere).\r\nExamples shipped with your project include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["ERIS (mono)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ERISast10.ini"})," (mode = ",(0,i.jsx)(n.code,{children:"FileMono"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ERISastSingles1.ini"})," (mode = ",(0,i.jsx)(n.code,{children:"Singles1"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ERISastRandom.ini"})," (mode = ",(0,i.jsx)(n.code,{children:"FileRandomMono"}),")"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["MAVIS (multi)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MAVISast.ini"})," (mode = ",(0,i.jsx)(n.code,{children:"File"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MAVISastSingles.ini"})," (mode = ",(0,i.jsx)(n.code,{children:"Singles3"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),". ",(0,i.jsx)(n.code,{children:"ERISastSingles1.ini"})," requires a pre-generated heuristic model, because the INI already references one: ",(0,i.jsx)(n.code,{children:"heuristicModel = 'ERISast_hmodel'"}),". See ",(0,i.jsx)(n.a,{href:"/astro-tiptop-services/docs/aquila/heuristic_models",children:(0,i.jsx)(n.strong,{children:"Heuristic models"})})," or the last section of this notebook to generate it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from pathlib import Path\r\n# === EDIT ME (or run as-is if you keep the suggested defaults) ===\r\nSIMUL_NAME   = \"ERIStest\"            # short name used as prefix for outputs\r\nPARAMS_DIR   = \"/my_path_to_TIPTOP/tiptop/astTest\" # folder containing your .ini files \"/\r\nINI_BASENAME = \"ERISast10\"           # file name *without* .ini extension\r\nOUTPUT_DIR   = \"outputs\"             # where arrays/PNGs will be written\r\nGPU_INDEX    = 0                     # choose target GPU if relevant\r\n\r\n# Create output dir if missing\r\nPath(OUTPUT_DIR).mkdir(parents=True, exist_ok=True)\r\n\r\nprint('Using configuration:')\r\nprint('  SIMUL_NAME  =', SIMUL_NAME)\r\nprint('  PARAMS_DIR  =', PARAMS_DIR)\r\nprint('  INI_BASENAME=', INI_BASENAME)\r\nprint('  OUTPUT_DIR  =', OUTPUT_DIR)\n"})}),"\n",(0,i.jsx)("p",{style:{fontFamily:"Consolas",fontSize:"0.8rem",backgroundColor:"#D1FAE5"},children:(0,i.jsxs)(n.p,{children:["Using configuration: ",(0,i.jsx)("br",{}),"\r\nSIMUL_NAME  = ERIStest ",(0,i.jsx)("br",{}),"\r\nPARAMS_DIR  = astTest ",(0,i.jsx)("br",{}),"\r\nINI_BASENAME= ERISast10 ",(0,i.jsx)("br",{}),"\r\nOUTPUT_DIR  = outputs ",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsxs)(n.h3,{id:"optional-list-available-ini-files",children:["(Optional) List available ",(0,i.jsx)(n.code,{children:".ini"})," files"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from pathlib import Path\r\np = Path(PARAMS_DIR)\r\nif not p.exists():\r\n    print(f\"[WARN] The folder {p} does not exist in your current working directory.\")\r\nelse:\r\n    print('INI files under', p.resolve())\r\n    for ini in sorted(p.glob('*.ini')):\r\n        print(' -', ini.name)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"2-run-the-asterism-selection",children:"2) Run the asterism selection"}),"\n",(0,i.jsxs)(n.p,{children:["This cell calls ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"tiptop.asterismSelection(...)"})})," using your chosen INI.",(0,i.jsx)(n.br,{}),"\n","Outputs (arrays) are saved into ",(0,i.jsx)(n.code,{children:"OUTPUT_DIR"}),", and a ",(0,i.jsx)(n.code,{children:"simulation"})," object is returned for further inspection."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import numpy as np\r\nfrom time import perf_counter\r\n\r\ntry:\r\n    from tiptop.tiptop import asterismSelection\r\nexcept Exception as e:\r\n    raise SystemExit(\"Could not import 'tiptop'. Install it first (pip install astro-tiptop).\\n\" + str(e))\r\n\r\nt0 = perf_counter()\r\nsr, fw, ee, covs, simul = asterismSelection(simulName=SIMUL_NAME, path2param=PARAMS_DIR,\r\n                                            parametersFile=INI_BASENAME, outputDir=OUTPUT_DIR,\r\n                                            outputFile='psf', doPlot=False,\r\n                                            returnRes=False, returnMetrics=True,\r\n                                            addSrAndFwhm=True, verbose=False,\r\n                                            getHoErrorBreakDown=False, ensquaredEnergy=False,\r\n                                            eeRadiusInMas=50, doConvolve=False,\r\n                                            plotInComputeAsterisms=False, progressStatus=False,\r\n                                            gpuIndex=GPU_INDEX,)\r\nt1 = perf_counter()\r\n\r\nprint(f\"Done in {t1 - t0:.1f} s\")\n"})}),"\n",(0,i.jsxs)("p",{style:{fontFamily:"Consolas",fontSize:"0.8rem",backgroundColor:"#D1FAE5"},children:[(0,i.jsxs)(n.p,{children:["Number of Fields: 10 ",(0,i.jsx)("br",{})]}),(0,i.jsxs)(n.p,{children:["total_skipped_fields:  0 ",(0,i.jsx)("br",{}),"\r\ntotal_skipped_asterisms:  0 ",(0,i.jsx)("br",{}),"\r\ntotal good asterisms:  39 ",(0,i.jsx)("br",{}),"\r\nDone in ... s"]})]}),"\n",(0,i.jsx)(n.h2,{id:"3-summarize-per-field--optional-json-export",children:"3) Summarize per field + (optional) JSON export"}),"\n",(0,i.jsx)(n.p,{children:"This step produces a quick, human-readable summary and (optionally) a JSON snapshot you can reuse (dashboards, API mocks, sharing)."}),"\n",(0,i.jsx)(n.h3,{id:"what-it-does",children:"What it does"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Uses the in-memory metrics (sr, fwhm, ee, penalty)."}),"\n",(0,i.jsxs)(n.li,{children:["For each field, finds the ",(0,i.jsx)(n.strong,{children:"best asterism"})," (lowest jitter/penalty)."]}),"\n",(0,i.jsx)(n.li,{children:"Prints a compact line: penalty, SR, FWHM, EE (reduced to scalars for readability)."}),"\n",(0,i.jsxs)(n.li,{children:["Optionally writes a JSON file:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"include_all=False"})," \u2192 only the best asterism per field (",(0,i.jsx)(n.code,{children:"best_by_field"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"include_all=True"})," \u2192 all asterisms, globally sorted by penalty (ascending)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"multi-mode-note-eg-mavis",children:"Multi-mode note (e.g., MAVIS)"}),"\n",(0,i.jsxs)(n.p,{children:["FWHM (and parfois EE) can be an array per asterism (several science points).\r\nThe  ",(0,i.jsx)(n.code,{children:"reduce="})," option controls how we turn that array into a single number for printing and the ",(0,i.jsx)(n.code,{children:"metrics"})," block in the JSON:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"mean"'})," (default): average across positions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"median"'}),": robust central tendency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"first"'}),": just take the first value (useful for quick checks)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Precision & size trade-offs:"})," ",(0,i.jsx)(n.code,{children:"round_ndigits=5"})," keeps the JSON light. Use ",(0,i.jsx)(n.code,{children:"None"})," for full precision."]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:" Summarize per field + (optional) JSON export  "})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os, json, numpy as np\r\nfrom dataclasses import asdict, is_dataclass\r\n\r\n# --- JSON-safe conversion + rounding --------------------------------\r\ndef _to_builtin(obj):\r\n    if isinstance(obj, np.generic):\r\n        return obj.item()\r\n    if is_dataclass(obj):\r\n        from dataclasses import asdict\r\n        return _to_builtin(asdict(obj))\r\n    if isinstance(obj, dict):\r\n        return {k: _to_builtin(v) for k, v in obj.items()}\r\n    if isinstance(obj, (list, tuple)):\r\n        return [_to_builtin(x) for x in obj]\r\n    if isinstance(obj, np.ndarray):\r\n        return _to_builtin(obj.tolist())\r\n    return obj\r\n\r\ndef _round_nums(obj, ndigits=None):\r\n    if ndigits is None:\r\n        return obj\r\n    if isinstance(obj, float):\r\n        return round(obj, ndigits)\r\n    if isinstance(obj, dict):\r\n        return {k: _round_nums(v, ndigits) for k, v in obj.items()}\r\n    if isinstance(obj, list):\r\n        return [_round_nums(v, ndigits) for v in obj]\r\n    return obj\r\n\r\ndef _star_list_from_simul(simul, idx):\r\n    """Return [{\'zenith\', \'azimuth\', \'photons\', \'freq\'}, ...] for asterism idx."""\r\n    P = getattr(simul, \'asterismsInputDataPolar\', None)\r\n    if P is None or idx >= len(P):\r\n        return []\r\n    block = np.asarray(P[idx])     # shape expected: (4, nGS)\r\n    if block.ndim != 2 or block.shape[0] != 4:\r\n        # fallback: try to coerce\r\n        block = np.reshape(block, (4, -1))\r\n    zen, az, pho, fr = (np.ravel(block[0]), np.ravel(block[1]),\r\n                        np.ravel(block[2]), np.ravel(block[3]))\r\n    stars = []\r\n    for z, a, p, f in zip(zen, az, pho, fr):\r\n        stars.append({\r\n            "zenith": float(z),\r\n            "azimuth": float(a),\r\n            "photons": float(p),\r\n            "freq":   float(f),\r\n        })\r\n    return stars\r\n\r\ndef _reduce_metric(x, how="mean"):\r\n    """\r\n    x can be scalar, 1D, 2D, etc. Returns a float.\r\n    how: "mean" | "median" | "first"\r\n    """\r\n    arr = np.asarray(x, dtype=float)\r\n    if arr.size == 0 or not np.isfinite(arr).any():\r\n        return None\r\n    if how == "first":\r\n        return float(arr.ravel()[0])\r\n    if how == "median":\r\n        return float(np.nanmedian(arr))\r\n    return float(np.nanmean(arr))  # default: mean\r\n\r\ndef _one_ast_dict(simul, idx, sr, fw, penalty, reduce="mean"):\r\n\r\n    """Build a dict for a given asterism (global index)."""\r\n    sr_v = None if sr is None else _reduce_metric(sr[idx], how=reduce)\r\n    fw_v = None if fw is None else _reduce_metric(fw[idx], how=reduce)\r\n    pj_v = None if penalty is None else _reduce_metric(penalty[idx], how="first")\r\n    return {\r\n        "index": int(idx),\r\n        "stars": _star_list_from_simul(simul, idx),\r\n        "metrics": {\r\n            "jitter": pj_v,\r\n            "strehl": sr_v,\r\n            "fwhm": fw_v,\r\n        },\r\n    }\r\n\r\n# --- summarize with optional JSON export -------------------------------------\r\ndef summarize(simul, sr, fw, outdir: str, simul_name: str,\r\n              save_json: bool = False,\r\n              json_path: str | None = None,\r\n              round_ndigits: int | None = 5,\r\n              include_all: bool = False,\r\n              reduce: str = "mean"):\r\n    """\r\n    Displays a summary by field (best asterism by increasing jitter).\r\n    Optional: writes a JSON file with either the best by field or all asterisms ranked.\r\n    """\r\n    penalty = getattr(simul, \'penalty_Asterism\', None)\r\n    cum     = getattr(simul, \'cumAstSizes\', None)\r\n    nfields = getattr(simul, \'nfields\', None)\r\n\r\n    print(\'\\n=== METRICS SHAPES ===\')\r\n    print(\'  SR :\', None if sr is None else np.shape(sr))\r\n    print(\'  FWHM:\', None if fw is None else np.shape(fw))\r\n\r\n    if cum is None or penalty is None or nfields is None:\r\n        print(\'\\n[WARN] Missing cumAstSizes/penalty_Asterism/nfields \u2014 per-field ranking skipped.\')\r\n        return\r\n\r\n    os.makedirs(outdir, exist_ok=True)\r\n    print(f"\\nFields: {nfields}")\r\n\r\n    best_items = []  # for "best_by_field" JSON\r\n\r\n    for f in range(nfields):\r\n        i0, i1 = int(cum[f]), int(cum[f+1])\r\n        if i1 <= i0:\r\n            print(f"Field {f:03d}: empty range")\r\n            continue\r\n\r\n        local_pen = np.asarray(penalty[i0:i1], dtype=float).ravel()\r\n        try:\r\n            jbest_local = int(np.nanargmin(local_pen))\r\n            best_index = i0 + jbest_local\r\n        except ValueError:\r\n            # Fallback to SR if penalty is NaN-only\r\n            if sr is None:\r\n                print(f"Field {f:03d}: cannot rank (no metrics).")\r\n                continue\r\n            jbest_local = int(np.nanargmax(np.asarray(sr[i0:i1]).astype(float)))\r\n            best_index = i0 + jbest_local\r\n\r\n        # --- Display (reduce metrics to scalars first)\r\n        pj_v = None if penalty is None else _reduce_metric(penalty[best_index], how="first")\r\n        sr_v = None if sr      is None else _reduce_metric(sr[best_index], how=reduce)\r\n        fw_v = None if fw      is None else _reduce_metric(fw[best_index], how=reduce)\r\n\r\n        msg = f"Field {f:03d} \u2192 best asterism (global index={best_index})"\r\n        parts = []\r\n        if pj_v is not None and np.isfinite(pj_v): parts.append(f"penalty={pj_v:.4g}")\r\n        if sr_v is not None and np.isfinite(sr_v): parts.append(f"SR={sr_v:.4g}")\r\n        if fw_v is not None and np.isfinite(fw_v): parts.append(f"FWHM={fw_v:.4g}")\r\n        if parts: msg += " [" + ", ".join(parts) + "]"\r\n        print(msg)\r\n\r\n        # Accumulate for the JSON best_by_field output\r\n        best_items.append({\r\n            "field": int(f),\r\n            **_one_ast_dict(simul, best_index, sr, fw, penalty, reduce=reduce)\r\n        })\r\n\r\n    # --- Optional JSON writing ------------------------------------------------\r\n    if save_json:\r\n        if json_path is None:\r\n            base = f"{simul_name}_{\'all\' if include_all else \'best\'}_asterisms.json"\r\n            json_path = os.path.join(outdir, base)\r\n\r\n        # Build payload\r\n        payload = {\r\n            "simul_name": simul_name,\r\n            "nfields": int(nfields),\r\n        }\r\n\r\n        if include_all:\r\n            # Global sort by increasing penalty\r\n            pen = np.asarray(penalty).reshape(-1)\r\n            order = np.argsort(pen)  # NaNs go last; if needed: np.argsort(np.nan_to_num(pen, nan=np.inf))\r\n            all_items = [_one_ast_dict(simul, int(i), sr, fw, penalty, reduce=reduce) for i in order]\r\n            payload["asterisms"] = all_items\r\n        else:\r\n            payload["best_by_field"] = best_items\r\n\r\n        # Make JSON-safe + round floats\r\n        payload = _round_nums(_to_builtin(payload), round_ndigits)\r\n\r\n        os.makedirs(os.path.dirname(json_path), exist_ok=True)\r\n        with open(json_path, "w", encoding="utf-8") as f:\r\n            json.dump(payload, f, ensure_ascii=False, indent=2)\r\n        print("\ud83d\udcdd JSON saved:", json_path)\n'})})]}),"\n",(0,i.jsxs)("p",{style:{fontFamily:"Consolas",fontSize:"0.8rem",backgroundColor:"#D1FAE5"},children:[(0,i.jsxs)(n.p,{children:["=== METRICS SHAPES === ",(0,i.jsx)("br",{}),"\r\nSR : (39, 1)",(0,i.jsx)("br",{}),"\r\nFWHM: (39, 1, 1)",(0,i.jsx)("br",{})]}),(0,i.jsxs)(n.p,{children:["Fields: 10",(0,i.jsx)("br",{}),"\r\nField 000 \u2192 best asterism (global index=2) [penalty=218.2, SR=0.5014, FWHM=48.49]",(0,i.jsx)("br",{}),"\r\nField 001 \u2192 best asterism (global index=7) [penalty=407.1, SR=0.09045, FWHM=76.38]",(0,i.jsx)("br",{}),"\r\nField 002 \u2192 best asterism (global index=12) [penalty=253.1, SR=0.3951, FWHM=53.25]",(0,i.jsx)("br",{}),"\r\nField 003 \u2192 best asterism (global index=16) [penalty=1079, SR=4.628e-08, FWHM=187.9]",(0,i.jsx)("br",{}),"\r\nField 004 \u2192 best asterism (global index=18) [penalty=288.5, SR=0.299, FWHM=58.33]",(0,i.jsx)("br",{}),"\r\nField 005 \u2192 best asterism (global index=23) [penalty=439, SR=0.06116, FWHM=81.43]",(0,i.jsx)("br",{}),"\r\nField 006 \u2192 best asterism (global index=26) [penalty=482.5, SR=0.0342, FWHM=88.39]",(0,i.jsx)("br",{}),"\r\nField 007 \u2192 best asterism (global index=29) [penalty=259.9, SR=0.3754, FWHM=54.22]",(0,i.jsx)("br",{}),"\r\nField 008 \u2192 best asterism (global index=33) [penalty=602.6, SR=0.005163, FWHM=108]",(0,i.jsx)("br",{}),"\r\nField 009 \u2192 best asterism (global index=36) [penalty=448.7, SR=0.05399, FWHM=82.97]",(0,i.jsx)("br",{}),"\r\n\ud83d\udcdd JSON saved: outputs\\ERIStest_all_asterisms.json"]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# --- Example call -------------------------------------------------------------\r\nsummarize(simul, sr, fw, outdir=OUTPUT_DIR, simul_name=SIMUL_NAME,\r\n           save_json=True, json_path=None, round_ndigits=5, include_all=True, reduce= "mean")\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"4-run-tiptopoverallsimulation-on-the-best-asterism",children:["4) Run ",(0,i.jsx)(n.code,{children:"tiptop.overallSimulation"})," on the best asterism"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal"}),". Re-run a full simulation on a ",(0,i.jsx)(n.strong,{children:"single asterism"}),": the global best (minimum jitter/penalty) across all fields combined, starting from exactly the same INI baseline as in step 1."]}),"\n",(0,i.jsx)(n.h3,{id:"what-this-cell-does",children:"What this cell does"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reloads (or reuses) the results from step 2."}),"\n",(0,i.jsxs)(n.li,{children:["Selects the ",(0,i.jsx)(n.strong,{children:"global"})," best asterism with the lowest penalty."]}),"\n",(0,i.jsxs)(n.li,{children:["Copies the base INI and injects the chosen NGS asterism into ",(0,i.jsx)(n.code,{children:"sources_LO"})," / ",(0,i.jsx)(n.code,{children:"sensor_LO"})," / ",(0,i.jsx)(n.code,{children:"RTC"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Removes the ",(0,i.jsx)(n.code,{children:"[ASTERISM_SELECTION]"})," section to switch to \u201csingle-asterism\u201d mode."]}),"\n",(0,i.jsxs)(n.li,{children:["Calls ",(0,i.jsx)(n.code,{children:"overallSimulation"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),". For demonstration purposes, this notebook picks ",(0,i.jsx)(n.strong,{children:"one global"})," best among all fields.\r\nIf you need one best asterism per field, iterate over the field ranges and select each field\u2019s minimum penalty."]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)("strong",{children:[" Run ",(0,i.jsx)(n.code,{children:"tiptop.overallSimulation"})," on the best asterism  "]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# === Use the base INI from step 1 ====================\r\nimport os, tempfile\r\nfrom configparser import ConfigParser\r\nimport numpy as np\r\nfrom tiptop.tiptop import overallSimulation\r\n\r\n# --- Reuse outputs from step 2 (no recomputation) -----------------\r\n# Prefer in-memory variables from step 2; otherwise, reload from disk via `reloadAsterismSelection`.\r\ntry:\r\n    _ = (sr, fw, simul)  # checks that the variables exist\r\n    print("\u2705 Reusing step-2 metrics (in memory)..")\r\nexcept NameError:\r\n    try:\r\n        from tiptop.tiptop import reloadAsterismSelection\r\n    except Exception as _e:\r\n        raise SystemExit("\u26a0\ufe0f Neither in-memory outputs nor reload is possible. "\r\n                         "Please run step 2 at least once.\\n" + str(_e))\r\n    print("\u2139\ufe0f Step-2 outputs not found in memory \u2014 reloading from disk\u2026")\r\n    sr, fw, ee, covs, simul = reloadAsterismSelection(\r\n        simulName=SIMUL_NAME, path2param=PARAMS_DIR,\r\n        parametersFile=INI_BASENAME, outputDir=OUTPUT_DIR,\r\n        outputFile=\'psf\', returnMetrics=True\r\n    )\r\n\r\ndef pick_best_asterism_global(simul) -> int:\r\n    """Best index by minimal penalty."""\r\n    pen = np.asarray(simul.penalty_Asterism).reshape(-1)\r\n    return int(np.nanargmin(pen))\r\n\r\ndef extract_polar_stars(simul, ast_global_index):\r\n    """Extract [zenith, azimuth, photons, freq] lists for a given global asterism index."""\r\n    block = np.asarray(simul.asterismsInputDataPolar[ast_global_index])  # shape (4, nGS)\r\n    z  = [float(v) for v in np.atleast_1d(block[0]).tolist()]\r\n    a  = [float(v) for v in np.atleast_1d(block[1]).tolist()]\r\n    ph = [float(v) for v in np.atleast_1d(block[2]).tolist()]\r\n    fr = [float(v) for v in np.atleast_1d(block[3]).tolist()]\r\n    return z, a, ph, fr\r\n\r\ndef write_ini_from_base_minimal(base_dir: str, base_name_no_ext: str,\r\n                                z_list, a_list, ph_list, fr_list,\r\n                                out_dir: str, new_name_no_ext: str) -> str:\r\n    """\r\n    Load the exact INI used in step 1, remove [ASTERISM_SELECTION], and inject the chosen asterism.\r\n    Only these keys are changed:\r\n      - sources_LO.Zenith / Azimuth\r\n      - sensor_LO.NumberPhotons\r\n      - RTC.SensorFrameRate_LO\r\n    """\r\n    base_path = os.path.join(base_dir, f"{base_name_no_ext}.ini")\r\n\r\n    cfg = ConfigParser()\r\n    cfg.optionxform = str  # preserve key case\r\n    with open(base_path, "r", encoding="utf-8") as f:\r\n        cfg.read_file(f)\r\n\r\n    # Remove the scan section if present\r\n    if cfg.has_section("ASTERISM_SELECTION"):\r\n        cfg.remove_section("ASTERISM_SELECTION")\r\n\r\n    # Ensure sections exist (usually they already exist in your base INI)\r\n    for sec in ("sources_LO", "sensor_LO", "RTC"):\r\n        if not cfg.has_section(sec):\r\n            cfg.add_section(sec)\r\n\r\n    # nGS must be consistent across lists\r\n    z_list = list(map(float, z_list))\r\n    a_list = list(map(float, a_list))\r\n    ph_list = list(map(float, ph_list))\r\n    fr_list = list(map(float, fr_list))\r\n    n_gs = {len(z_list), len(a_list), len(ph_list), len(fr_list)}\r\n    assert len(n_gs) == 1, f"Inconsistent NGS lengths: {n_gs}"\r\n\r\n    # Write only the four LO keys; keep everything else from the base INI\r\n    cfg.set("sources_LO", "Zenith",  repr(z_list))\r\n    cfg.set("sources_LO", "Azimuth", repr(a_list))\r\n    cfg.set("sensor_LO", "NumberPhotons", repr(ph_list))\r\n    cfg.set("RTC",       "SensorFrameRate_LO", repr(fr_list))\r\n\r\n    os.makedirs(out_dir, exist_ok=True)\r\n    out_path = os.path.join(out_dir, f"{new_name_no_ext}.ini")\r\n    with open(out_path, "w", encoding="utf-8") as f:\r\n        cfg.write(f)\r\n    print("\ud83d\udcdd Wrote INI (minimal):", out_path)\r\n    return out_path\r\n\r\n# ---- Choose best asterism and run overallSimulation ------------------------\r\nbest_idx = pick_best_asterism_global(simul)\r\nz,a,ph,fr = extract_polar_stars(simul, best_idx)\r\n\r\n# IMPORTANT: set these two to the SAME values you used in step 1\r\n# (path to the directory containing your original .ini, and its basename without .ini)\r\nBASE_DIR   = PARAMS_DIR\r\nBASE_NAME  = INI_BASENAME\r\n\r\ntmp_dir = tempfile.mkdtemp(prefix="tiptop_best_")\r\nNEW_NAME = f"{BASE_NAME}_best_ast"\r\nini_path = write_ini_from_base_minimal(BASE_DIR, BASE_NAME, z, a, ph, fr, tmp_dir, NEW_NAME)\r\n\r\n# Run the single-asterism full simulation\r\noverallSimulation(tmp_dir, NEW_NAME, OUTPUT_DIR, f"{SIMUL_NAME}_best",\r\n                                  returnMetrics=False, verbose=False)\r\n\r\nprint("\u2705 overallSimulation done.")\r\nprint("Best asterism global index:", best_idx)\n'})})]}),"\n",(0,i.jsx)("p",{style:{fontFamily:"Consolas",fontSize:"0.8rem",backgroundColor:"#D1FAE5"},children:(0,i.jsxs)(n.p,{children:["\u2705 Reusing step-2 metrics (in memory).. ",(0,i.jsx)("br",{}),"\r\n\ud83d\udcdd Wrote INI (minimal): C:\\Users\\user\\AppData\\Local\\Temp\\tiptop_best_q8dtcqyv\\ERISast10_best_ast.ini ",(0,i.jsx)("br",{}),"\r\n\u2705 overallSimulation done.",(0,i.jsx)("br",{}),"\r\nBest asterism global index: 2"]})}),"\n",(0,i.jsxs)(n.h3,{id:"read-the-metrics-written-by-overallsimulation-from-the-fits",children:["Read the metrics written by ",(0,i.jsx)(n.code,{children:"overallSimulation"})," (from the FITS)"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)("strong",{children:[" Read the metrics written by ",(0,i.jsx)(n.code,{children:"overallSimulation"})," (from the FITS)  "]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from astropy.io import fits\r\nimport os\r\n\r\nfits_path = os.path.join(OUTPUT_DIR, f"{SIMUL_NAME}_best.fits")\r\nif not os.path.exists(fits_path):\r\n    raise FileNotFoundError(f"FITS file not found: {fits_path}")\r\n\r\nhdul = fits.open(fits_path)\r\nhdr = hdul[1].header\r\ndata = hdul[1].data\r\n\r\nn_psf = data.shape[0]\r\nwvl = float(hdr.get("WL_NM"))       # Wavelength in nm\r\npix_mas = float(hdr.get("PIX_MAS")) # Pixel scale in milliarcseconds\r\n\r\nsr_list   = [hdr.get(f"SR{k:04d}")   for k in range(n_psf)]\r\nfwhm_list = [hdr.get(f"FWHM{k:04d}") for k in range(n_psf)]\r\n\r\nprint(f"File: {fits_path}")\r\nprint(f"WL_NM={wvl:.0f} nm | PIX_MAS={pix_mas:.2f} mas/px | n_psf={n_psf}")\r\nprint("SR per PSF  :", sr_list)\r\nprint("FWHM per PSF:", fwhm_list, "(mas)")\r\nhdul.close()\n'})})]}),"\n",(0,i.jsx)("p",{style:{fontFamily:"Consolas",fontSize:"0.8rem",backgroundColor:"#D1FAE5"},children:(0,i.jsxs)(n.p,{children:["File: outputs\\ERIStest_best.fits ",(0,i.jsx)("br",{}),"\r\nWL_NM=1650 nm | PIX_MAS=14.00 mas/px | n_psf=1 ",(0,i.jsx)("br",{}),"\r\nSR per PSF  : [0.50135] ",(0,i.jsx)("br",{}),"\r\nFWHM per PSF: [47.295] (mas)"]})}),"\n",(0,i.jsx)(n.h3,{id:"visualize-the-ao-psfs-grid--srfwhm-labels",children:"Visualize the AO PSFs (grid + SR/FWHM labels)"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:" Visualize the AO PSFs (grid + SR/FWHM labels)  "})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# === Visualize AO PSFs written by overallSimulation ===\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.colors as mcolors\r\n\r\n# Try to import cropSupport; otherwise provide a simple fallback\r\ntry:\r\n    from p3.aoSystem.FourierUtils import cropSupport\r\nexcept Exception:\r\n    def cropSupport(img, factor_or_size):\r\n        \"\"\"\r\n        Fallback: center-crop to a square of size N/factor if int factor,\r\n        or to 'factor_or_size' if it looks like a pixel size.\r\n        \"\"\"\r\n        arr = np.asarray(img)\r\n        n   = arr.shape[0]\r\n        if isinstance(factor_or_size, int) and factor_or_size > 1:\r\n            size = max(4, n // factor_or_size)\r\n        else:\r\n            size = int(factor_or_size)\r\n        c = n // 2\r\n        h = size // 2\r\n        return arr[c - h:c + h, c - h:c + h]\r\n\r\n\r\n# How many PSFs to display (largest square \u2264 n_psf)\r\nmax_display = int(np.floor(np.sqrt(n_psf))) ** 2  \r\nn_rows = int(np.sqrt(max_display))\r\nn_cols = n_rows\r\n\r\n# Crop parameters and axes (arcsec)\r\ncrop_size = 4\r\nnx = cropSupport(data[0], crop_size).shape[0]\r\naxis = np.linspace(-nx//2, nx//2, nx) * pix_mas * 1e-3\r\n\r\nfig, axs = plt.subplots(n_rows, n_cols, figsize=(8, 8), constrained_layout=True, squeeze=False)\r\nfor i in range(max_display):\r\n    ax = axs.flat[i]\r\n    img = ax.imshow(cropSupport(data[i], crop_size),\r\n                    cmap='Spectral_r',\r\n                    extent=[axis[0], axis[-1], axis[0], axis[-1]],\r\n                    norm=mcolors.LogNorm(vmin=np.max(data)*1e-4, vmax=np.max(data)))\r\n    ax.text(0.05, 0.05,\r\n         f'SR:{sr_list[i]*100:.1f}%, FWHM:{fwhm_list[i]:.1f} mas',\r\n         color='white', fontsize=9, transform=ax.transAxes,\r\n         bbox=dict(facecolor='black', alpha=0.5, lw=0))\r\n    if i % n_cols == 0:\r\n        ax.set_ylabel('Arcsec', fontsize=10)\r\n    else:\r\n        ax.set_yticks([])\r\n    if i // n_cols == n_rows - 1:\r\n        ax.set_xlabel('Arcsec', fontsize=10)\r\n    else:\r\n        ax.set_xticks([])\r\n    # Set tick parameters\r\n    ax.tick_params(labelsize=10, color='white')\r\n    # Add a small colorbar to the right of each subplot\r\n    cbar = plt.colorbar(img, ax=ax, fraction=0.046, pad=0.01)\r\n    cbar.ax.tick_params(labelsize=6)\n"})})]}),"\n",(0,i.jsxs)("p",{style:{backgroundColor:"#D1FAE5",textAlign:"center"},children:[" ",(0,i.jsx)(n.img,{src:r(1960).A+"",width:"411",height:"345"})," "]}),"\n",(0,i.jsx)(n.h2,{id:"4-reload-previously-computed-metrics",children:"4) Reload previously computed metrics"}),"\n",(0,i.jsx)(n.p,{children:"Use this helper when you only need the arrays (e.g., for a dashboard or after a long run)."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal"}),". Bring the arrays (",(0,i.jsx)(n.code,{children:"sr"}),", ",(0,i.jsx)(n.code,{children:"fwhm"}),", ",(0,i.jsx)(n.code,{children:"ee"}),", ",(0,i.jsx)(n.code,{children:"covs"}),") and a lightweight simulation object back into memory without rerunning the AO engine."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"try:\r\n    from tiptop.tiptop import reloadAsterismSelection\r\nexcept Exception as e:\r\n    raise SystemExit('Install tiptop first: pip install astro-tiptop\\n' + str(e))\r\n\r\nsr, fw, ee, covs, simul = reloadAsterismSelection(simulName=SIMUL_NAME,path2param=PARAMS_DIR,\r\n                                                  parametersFile=INI_BASENAME, outputDir=OUTPUT_DIR,\r\n                                                  outputFile='psf', doPlot=False,\r\n                                                  returnRes=False, returnMetrics=True,\r\n                                                  addSrAndFwhm=True, verbose=False,\r\n                                                  getHoErrorBreakDown=False, ensquaredEnergy=False,\r\n                                                  eeRadiusInMas=50, gpuIndex=GPU_INDEX)\r\n\r\nprint('Reloaded arrays:', \r\n      'SR' if sr is not None else '-', \r\n      'FW' if fw is not None else '-', \r\n      'EE' if ee is not None else '-')\n"})}),"\n",(0,i.jsxs)("p",{style:{fontFamily:"Consolas",fontSize:"0.8rem",backgroundColor:"#D1FAE5"},children:[(0,i.jsxs)(n.p,{children:["Number of Fields: 10 ",(0,i.jsx)("br",{})]}),(0,i.jsxs)(n.p,{children:["total_skipped_fields:  0 ",(0,i.jsx)("br",{}),"\r\ntotal_skipped_asterisms:  0 ",(0,i.jsx)("br",{}),"\r\ntotal good asterisms:  39 ",(0,i.jsx)("br",{}),"\r\nReloaded arrays: SR FW EE ",(0,i.jsx)("br",{})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-optional-train--test-a-heuristic-model",children:"5) (Optional) Train & test a heuristic model"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal"}),". Learn a fast surrogate that can rank asterisms without running the full AO simulation each time."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mono (ERIS) \u2192 spline-based model"}),"\n",(0,i.jsx)(n.li,{children:"Multi (MAVIS) \u2192 small neural network"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"what-this-cell-does-1",children:"What this cell does"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensures asterism metrics exist (computes or reloads them internally)."}),"\n",(0,i.jsxs)(n.li,{children:["Splits data into train/test (default ",(0,i.jsx)(n.code,{children:"share=0.9"})," \u2192 90% train, 10% test)."]}),"\n",(0,i.jsxs)(n.li,{children:["Trains the model and, if ",(0,i.jsx)(n.code,{children:"doTest=Tru"}),"e, reports accuracy and ranking quality."]}),"\n",(0,i.jsxs)(n.li,{children:["Saves a model file (typically under ",(0,i.jsx)(n.code,{children:"OUTPUT_DIR"}),") named like ",(0,i.jsx)(n.code,{children:"<INI_BASENAME>_hmodel.npy"})," (mono) or ",(0,i.jsx)(n.code,{children:".pth"})," (multi)."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Enable training only when there are enough asterisms to learn from.\r\n# For now, this INI is the only one that reliably produces sufficient samples\r\n# (random/synthetic). If another configuration meets the threshold, update the check.\r\nDO_TRAIN = True  # set True to run training\r\nif INI_BASENAME in (\"ERISastRandom\", \"ERISast\"):\r\n    if DO_TRAIN:\r\n        try:\r\n            from tiptop.tiptop import generateHeuristicModel\r\n        except Exception as e:\r\n            raise SystemExit('Install tiptop first: pip install tiptop\\n' + str(e))\r\n\r\n        simul_h = generateHeuristicModel(simulName=SIMUL_NAME, path2param=PARAMS_DIR,\r\n                                        parametersFile=INI_BASENAME, outputDir=OUTPUT_DIR,\r\n                                        outputFile='psf', doPlot=False, doTest=False,\r\n                                        share=0.9, eeRadiusInMas=50, gpuIndex=GPU_INDEX)\r\n        print('Heuristic model generated. You can now set heuristicModel in the INI to reuse it.')\n"})}),"\n",(0,i.jsx)("p",{style:{fontFamily:"Consolas",fontSize:"0.8rem",backgroundColor:"#D1FAE5"},children:(0,i.jsxs)(n.p,{children:["(1795,) (1795,) ",(0,i.jsx)("br",{}),"\r\nMean Absolute Error Train 12.527197111054319 ",(0,i.jsx)("br",{}),"\r\nMean Relative Error Train 0.01709513279543673 ",(0,i.jsx)("br",{}),"\r\nMedian Absolute Error Train 0.4478981287497845 ",(0,i.jsx)("br",{}),"\r\nRMS Error Train 95.89395221256406 ",(0,i.jsx)("br",{}),"\r\nHeuristic model generated. You can now set heuristicModel in the INI to reuse it."]})}),"\n",(0,i.jsx)(n.h3,{id:"how-to-reuse-the-model",children:"How to reuse the model"}),"\n",(0,i.jsxs)(n.p,{children:["Add the path to your INI so subsequent ",(0,i.jsx)(n.code,{children:"asterismSelection(...)"})," runs can skip the heavy AO step and rank instantly:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"[ASTERISM_SELECTION]\r\nheuristicModel = outputs/ERISastRandom_hmodel.npy  ; or MAVIS..._hmodel.pth\n"})}),"\n",(0,i.jsx)(n.h3,{id:"inputs-to-keep-consistent",children:"Inputs to keep consistent"}),"\n",(0,i.jsxs)(n.p,{children:["Use the same ",(0,i.jsx)(n.code,{children:"SIMUL_NAME"}),", ",(0,i.jsx)(n.code,{children:"PARAMS_DIR"}),", ",(0,i.jsx)(n.code,{children:"INI_BASENAME"}),", and ",(0,i.jsx)(n.code,{children:"OUTPUT_DIR"})," you used for your asterism run so the trainer can find the data it needs."]}),"\n",(0,i.jsx)(n.h3,{id:"notes--tips",children:"Notes & tips"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eeRadiusInMas"})," should match how you computed/expect EE in your metrics."]}),"\n",(0,i.jsx)(n.li,{children:"You need enough asterisms to train (dozens at least; the more the better)."}),"\n",(0,i.jsx)(n.li,{children:"Models are not portable across different system configs/instruments\u2014train per setup."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},1960:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/psf_eris_ast-6e626707cee1c9cea51f5660722b7f27.png"},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var s=r(6540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);