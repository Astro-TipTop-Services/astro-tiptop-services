"use strict";(self.webpackChunktiptop_site=self.webpackChunktiptop_site||[]).push([[4196],{4602:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"aquila/parameterfiles","title":"Parameter files","description":"[ASTERISM_SELECTION]","source":"@site/docs/aquila/parameterfiles.md","sourceDirName":"aquila","slug":"/aquila/parameterfiles","permalink":"/astro-tiptop-services/docs/aquila/parameterfiles","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"parameterfiles","title":"Parameter files","sidebar_label":"Parameter files - [ASTERISM_SELECTION]"},"sidebar":"tipTopSidebar","previous":{"title":"Overview","permalink":"/astro-tiptop-services/docs/aquila/overview"},"next":{"title":"Running selections","permalink":"/astro-tiptop-services/docs/aquila/running_selection"}}');var i=s(4848),l=s(8453);const t={id:"parameterfiles",title:"Parameter files",sidebar_label:"Parameter files - [ASTERISM_SELECTION]"},d=void 0,o={},c=[{value:"<code>[ASTERISM_SELECTION]</code>",id:"asterism",level:2},{value:"\ud83d\udd0e Parameters in Detail",id:"-parameters-in-detail",level:2},{value:"Advanced / optional keys",id:"advanced--optional-keys",level:3},{value:"\u2705 Supported <code>mode</code> values",id:"supportedmodes",level:2},{value:"Modes overview",id:"modes-overview",level:3},{value:"Internal details / DEV notes",id:"internal-details--dev-notes",level:3},{value:"\u2b50 Flux scaling &amp; units",id:"-flux-scaling--units",level:2},{value:"\ud83d\udcc4 File format (for <code>File</code>/<code>FileMono</code>)",id:"format",level:2},{value:"Example: generating a <code>.npy</code> file",id:"example-generating-a-npy-file",level:3},{value:"\u27a1\ufe0f Minimal <code>.ini</code> examples",id:"\ufe0f-minimal-ini-examples",level:2},{value:"<code>mode = &#39;Sets&#39;</code>",id:"sets_mode",level:3},{value:"<code>mode = &#39;Singles1&#39;</code> or <code>mode = &#39;Singles3&#39;</code>",id:"single_mode",level:3},{value:"<code>mode = &#39;Generate&#39;</code>",id:"generate_mode",level:3},{value:"<code>mode = &#39;File&#39;</code>",id:"file_mode",level:3},{value:"<code>mode = &#39;FileMono&#39;</code>",id:"filemono_mode",level:3}];function a(e){const r={a:"a",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components},{Details:s}=r;return s||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"asterism",children:(0,i.jsx)(r.code,{children:"[ASTERISM_SELECTION]"})}),"\n",(0,i.jsxs)(r.p,{children:["This page describes the ",(0,i.jsx)(r.code,{children:"[ASTERISM_SELECTION]"})," block you must add in your .ini files."]}),"\n",(0,i.jsx)(r.h2,{id:"-parameters-in-detail",children:"\ud83d\udd0e Parameters in Detail"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{style:{textAlign:"left"},children:"Parameter"}),(0,i.jsx)(r.th,{style:{textAlign:"left"},children:"Required?"}),(0,i.jsx)(r.th,{style:{textAlign:"center"},children:"Type"}),(0,i.jsx)(r.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"mode"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"Yes"}),(0,i.jsx)(r.td,{style:{textAlign:"center"},children:(0,i.jsx)(r.code,{children:"string"})}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:["How asterism data is provided. See ",(0,i.jsx)(r.a,{href:"/docs/aquila/parameterfiles#supportedmodes",children:(0,i.jsx)(r.strong,{children:"Supported modes"})}),"."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"Zenith"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"Yes*"}),(0,i.jsxs)(r.td,{style:{textAlign:"center"},children:[(0,i.jsx)(r.code,{children:"list of float"})," or ",(0,i.jsx)(r.code,{children:"list of list of float"})]}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:["Angular distance(s) from axis(",(0,i.jsx)(r.em,{children:"[arcsec]"}),"). Format depends on mode: ",(0,i.jsx)("br",{})," - ",(0,i.jsx)(r.code,{children:"Sets"}),": list per asterism (e.g.",(0,i.jsx)(r.code,{children:"[[z1,z2,z3], [z4,z5,z6]]"}),"). ",(0,i.jsx)("br",{})," - ",(0,i.jsx)(r.code,{children:"SinglesN"}),": flat list per star (e.g. ",(0,i.jsx)(r.code,{children:"[z1, z2, z3...]"}),"). ",(0,i.jsx)("br",{}),"- ",(0,i.jsx)(r.code,{children:"Generate"}),": one-element list. ",(0,i.jsx)("br",{})," Ignored for ",(0,i.jsx)(r.code,{children:"File"}),"or ",(0,i.jsx)(r.code,{children:"FileMono"}),"."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"Azimuth"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"Yes*"}),(0,i.jsxs)(r.td,{style:{textAlign:"center"},children:[(0,i.jsx)(r.code,{children:"list of float"})," or ",(0,i.jsx)(r.code,{children:"list of list of float"})]}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:["Angle(s) (degrees). Same format and rules as ",(0,i.jsx)(r.code,{children:"Zenith"}),". ",(0,i.jsx)("br",{})," Ignored for ",(0,i.jsx)(r.code,{children:"File"})," or ",(0,i.jsx)(r.code,{children:"FileMono"}),"."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"NumberPhotons"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"Yes*"}),(0,i.jsxs)(r.td,{style:{textAlign:"center"},children:[(0,i.jsx)(r.code,{children:"list of float"})," or ",(0,i.jsx)(r.code,{children:"list of list of float"})]}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:["Flux per star (",(0,i.jsx)(r.em,{children:"[photons / subaperture / frame]"}),"). Format depends on mode. Ignored for ",(0,i.jsx)(r.code,{children:"File"}),"/",(0,i.jsx)(r.code,{children:"FileMono"})," (in those cases it is computed from magnitudes and transmission)."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"Frequencies"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"Yes*"}),(0,i.jsxs)(r.td,{style:{textAlign:"center"},children:[(0,i.jsx)(r.code,{children:"list of float"})," or ",(0,i.jsx)(r.code,{children:"list of list of float"})]}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:["List of frequencies for the LO loop (",(0,i.jsx)(r.em,{children:"[Hz]"}),"). Ignored for ",(0,i.jsx)(r.code,{children:"File"}),"/",(0,i.jsx)(r.code,{children:"FileMono"}),". ",(0,i.jsx)("br",{})," If missing, all the frequencies are considered to be equal to the value of ",(0,i.jsx)(r.code,{children:"SensorFrameRate_LO"}),"in the ",(0,i.jsx)(r.code,{children:"[RTC]"})," section."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"filename"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"Yes**"}),(0,i.jsx)(r.td,{style:{textAlign:"center"},children:(0,i.jsx)(r.code,{children:"string"})}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:["Path to a ",(0,i.jsx)(r.code,{children:".npy"})," NumPy recarray with fields and asterisms (See ",(0,i.jsx)(r.a,{href:"/docs/aquila/parameterfiles#format",children:"File formats"}),"). Only for ",(0,i.jsx)(r.code,{children:"File"})," or ",(0,i.jsx)(r.code,{children:"FileMono"}),"."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"offset"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"Yes**"}),(0,i.jsx)(r.td,{style:{textAlign:"center"},children:(0,i.jsx)(r.code,{children:"integer"})}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:[(0,i.jsx)(r.em,{children:"Default"}),": 0, First field index to read from ",(0,i.jsx)(r.code,{children:"filename"}),". Used only in ",(0,i.jsx)(r.code,{children:"File"}),"/",(0,i.jsx)(r.code,{children:"FileMono"}),"."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"fieldsNumber"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"No"}),(0,i.jsx)(r.td,{style:{textAlign:"center"},children:(0,i.jsx)(r.code,{children:"integer"})}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:[(0,i.jsx)(r.em,{children:"Default"}),": all, Maximum number of FoVs to read from filename. If not specified, all available FoV are processed."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"transmissionFactor"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"Yes"}),(0,i.jsx)(r.td,{style:{textAlign:"center"},children:(0,i.jsx)(r.code,{children:"float"})}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:["Telescope+instrument transmission factor, used to convert magnitudes to photon flux.",(0,i.jsx)("br",{})," Used only in ",(0,i.jsx)(r.code,{children:"File"}),"/",(0,i.jsx)(r.code,{children:"FileMono"}),"."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{style:{textAlign:"left"},children:(0,i.jsx)(r.code,{children:"bands"})}),(0,i.jsx)(r.td,{style:{textAlign:"left"},children:"Yes"}),(0,i.jsx)(r.td,{style:{textAlign:"center"},children:(0,i.jsx)(r.code,{children:"list of string"})}),(0,i.jsxs)(r.td,{style:{textAlign:"left"},children:["Photometric bands used to compute magnitudes and thus the flux.",(0,i.jsx)("br",{})," Used only in ",(0,i.jsx)(r.code,{children:"File"}),"/",(0,i.jsx)(r.code,{children:"FileMono"}),"."]})]})]})]}),"\n",(0,i.jsxs)(r.p,{children:["* Used only if ",(0,i.jsx)(r.code,{children:"mode"})," = ",(0,i.jsx)(r.code,{children:"Sets"}),", ",(0,i.jsx)(r.code,{children:"Singles1"}),", ",(0,i.jsx)(r.code,{children:"Singles3"}),", or ",(0,i.jsx)(r.code,{children:"Generate"}),".",(0,i.jsx)("br",{}),"\r\n** Required only if ",(0,i.jsx)(r.code,{children:"mode"})," = ",(0,i.jsx)(r.code,{children:"File"})," or ",(0,i.jsx)(r.code,{children:"FileMono"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"advanced--optional-keys",children:"Advanced / optional keys"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Key"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Applies to"}),(0,i.jsx)(r.th,{children:"Meaning"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"heuristicModel"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"str"})}),(0,i.jsx)(r.td,{children:"any"}),(0,i.jsxs)(r.td,{children:["Base name of a pre-trained heuristic model to load (mono: spline ",(0,i.jsx)(r.code,{children:".npy"}),"; multi: NN ",(0,i.jsx)(r.code,{children:".pth"}),"). If present and mono, it is auto-loaded from ",(0,i.jsx)(r.code,{children:"outputDir/<name>.npy"})]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"freqRule"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"str"})}),(0,i.jsx)(r.td,{children:"File/Mono"}),(0,i.jsxs)(r.td,{children:["Frequency rule from magnitude. Supports ",(0,i.jsx)(r.code,{children:"'MORFEO'"}),", ",(0,i.jsx)(r.code,{children:"'MORFEO_FA'"})," else ",(0,i.jsx)(r.code,{children:"ERIS"})," (mono) or ",(0,i.jsx)(r.code,{children:"MAVIS"})," (multi) defaults are used."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"fluxH0"}),", ",(0,i.jsx)(r.code,{children:"fluxJ0"}),", ",(0,i.jsx)(r.code,{children:"fluxR0"}),", ",(0,i.jsx)(r.code,{children:"fluxI0"})]}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"float"})}),(0,i.jsx)(r.td,{children:"File/Mono"}),(0,i.jsx)(r.td,{children:"Zeropoints (photons) per band for mag\u2192flux. If absent, internal defaults are used."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"scalePhotonsFocus"}),", ",(0,i.jsx)(r.code,{children:"scaleFrequenciesFocus"})]}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"float"})}),(0,i.jsx)(r.td,{children:"any"}),(0,i.jsxs)(r.td,{children:["Optional factors to derive Focus sensor photons/frame and frequency from LO values: we compute ",(0,i.jsx)(r.code,{children:"fr_focus = fr_LO * scaleFrequenciesFocus, then ph/frame_focus = (ph/frame_LO) * (fr_LO/fr_focus) * scalePhotonsFocus"}),". Saved per star."]})]})]})]}),"\n",(0,i.jsxs)(r.p,{children:["\u270f\ufe0f ",(0,i.jsx)(r.strong,{children:"DEV note"})," (used internally):\r\n",(0,i.jsx)(r.code,{children:"telescope.TechnicalFoV"})," sets the technical FoV radius used when generating/validating fields; ",(0,i.jsx)(r.code,{children:"sensor_LO.NumberLenslets"})," and ",(0,i.jsx)(r.code,{children:"telescope.ObscurationRatio"})," are used to normalize the photon flux per subaperture (see \u201cFlux scaling\u201d below)."]}),"\n",(0,i.jsxs)(r.h2,{id:"supportedmodes",children:["\u2705 Supported ",(0,i.jsx)(r.code,{children:"mode"})," values"]}),"\n",(0,i.jsx)("p",{align:"justify",children:(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"mode"})," key defines how ",(0,i.jsx)(r.strong,{children:"TipTop"})," receives asterism data."]})}),"\n",(0,i.jsx)(r.h3,{id:"modes-overview",children:"Modes overview"}),"\n",(0,i.jsx)("p",{align:"justify",children:(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"Sets"})})," \u2192 Explicit list of asterisms. ",(0,i.jsx)("br",{}),"\r\nOne field only. Each entry = 3 stars (MAVIS-like) or 1 star (ERIS-like). ",(0,i.jsx)("br",{}),"\r\nSee examples ",(0,i.jsx)(r.a,{href:"/docs/aquila/parameterfiles#sets_mode",children:(0,i.jsx)(r.strong,{children:"here"})}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"SinglesN"})})," \u2192 Flat star list; TipTop builds all combinations of size ",(0,i.jsx)(r.em,{children:"N"})," (",(0,i.jsx)(r.code,{children:"itertools.combinations"}),").",(0,i.jsx)("br",{}),"\r\nOne field only. \u26a0\ufe0fCurrently only ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"Singles1"})}),"(for one star asterism like in ERIS) and ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"Singles3"})})," (for three stars asterism like in MAVIS) are supported.",(0,i.jsx)("br",{}),"\r\nSee examples ",(0,i.jsx)(r.a,{href:"/docs/aquila/parameterfiles#single_mode",children:(0,i.jsx)(r.strong,{children:"here"})}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"Generate"})})," \u2192 Synthetic triangles for developer testing.\r\nGenerates multiple ''fileds'' of test asterisms. ",(0,i.jsx)("br",{}),"\r\nSee example ",(0,i.jsx)(r.a,{href:"/docs/aquila/parameterfiles#generate_mode",children:(0,i.jsx)(r.strong,{children:"here"})}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"File"})})," \u2192 Load multiple fields from a NumPy recarray (",(0,i.jsx)(r.code,{children:".npy"}),"). ",(0,i.jsx)("br",{}),"\r\nEach entry = 3-star asterism. Fields are looped; flux is computed from magnitudes and ",(0,i.jsx)(r.code,{children:"transmissionFactor"}),". ",(0,i.jsx)("br",{}),"\r\nSee example ",(0,i.jsx)(r.a,{href:"/docs/aquila/parameterfiles#file_mode",children:(0,i.jsx)(r.strong,{children:"here"})}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.code,{children:"FileMono"})})," \u2192 Same as ",(0,i.jsx)(r.code,{children:"File"}),", but each entry is treated as a single-star asterism. ",(0,i.jsx)("br",{}),"\r\nSee example ",(0,i.jsx)(r.a,{href:"/docs/aquila/parameterfiles#filemono_mode",children:(0,i.jsx)(r.strong,{children:"here"})}),"."]}),"\n"]})}),"\n",(0,i.jsx)(r.h3,{id:"internal-details--dev-notes",children:"Internal details / DEV notes"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:" Show internal arrays populated by each mode "})}),(0,i.jsx)(r.p,{children:"Internally, modes populate:"}),(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"nfieldsSizes"}),": number of asterisms per field (list, length = nfields)",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"cumAstSizes"}),": cumulative count of asterisms per field (length = nfields+1)",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"cumStarSizes"}),": cumulative count of distinct stars per field (length = nfields+1)",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"allAsterismsIndices"}),": per asterism, indices of the stars in that field",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"asterismsInputDataCartesian/Polar"}),": packed arrays (shape ",(0,i.jsx)(r.code,{children:"[nAst, 4, nNGS]"}),") with positions, flux, frequency",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"isMono"})," + ",(0,i.jsx)(r.code,{children:"nNGS"}),": whether an asterism is a single star (",(0,i.jsx)(r.code,{children:"nNGS=1"}),") or a triangle (",(0,i.jsx)(r.code,{children:"nNGS=3"}),")"]}),"\n"]}),(0,i.jsx)(r.p,{children:"Implementation notes:"}),(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Sets"}),": builds ",(0,i.jsx)(r.code,{children:"all_combos"})," explicitly; updates cum arrays via ",(0,i.jsx)(r.code,{children:"addFieldDataCombos"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Singles1/3"}),": builds ",(0,i.jsx)(r.code,{children:"all_combos"})," from star list, updates cum arrays; ",(0,i.jsx)(r.code,{children:"cumStarSizes=[0, nStars]"}),"."]}),"\n"]}),(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"FileRandom"}),": loads from ",(0,i.jsx)(r.code,{children:".npy"})," files if present; else calls ",(0,i.jsx)(r.code,{children:"generateRandom(nfields)"})," which samples random stars per FoV, computes flux, builds all data arrays, and saves ",(0,i.jsx)(r.code,{children:".npy"})," for reuse."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"File/Mono Recarray"}),": uses ",(0,i.jsx)(r.code,{children:"generateFromRecArrayMulti"})," (3 stars) or ",(0,i.jsx)(r.code,{children:"generateFromRecArray"})," (1 star). Handles invalid/skipped fields (zero flux, out of FoV)."]}),"\n"]})]}),"\n",(0,i.jsx)(r.h2,{id:"-flux-scaling--units",children:"\u2b50 Flux scaling & units"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:" Show flux normalization details "})}),(0,i.jsx)(r.p,{children:"When you provide magnitudes (File/FileMono) or photons/frame, TipTop normalizes the per-subaperture flux using telescope/instrument geometry and LO sampling:"}),(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Total LO subapertures:\r\n",(0,i.jsx)(r.code,{children:"N_sa_tot_LO = N_lenslets^2"})," (adjusted for circular pupil & central obscuration if ",(0,i.jsx)(r.code,{children:"N_lenslets > 2"}),")"]}),"\n",(0,i.jsxs)(r.li,{children:["Flux scaling factor applied to photons/frame per star:\r\n",(0,i.jsx)(r.code,{children:"fluxScaling =(\u200b\u03c0(D/2)^2(1\u2212\u03f5^2)transmissionFactor)/\u200bN_sa_tot_LO"}),(0,i.jsx)("br",{}),"\r\nwith ",(0,i.jsx)(r.code,{children:"D = telescope.TelescopeDiameter"}),", ",(0,i.jsx)(r.code,{children:"\u03b5 = telescope.ObscurationRatio"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Focus sensor derived values (if you set scaling keys):\r\n",(0,i.jsx)(r.code,{children:"fr_focus = fr_LO * scaleFrequenciesFocus"}),"\r\n",(0,i.jsx)(r.code,{children:"ph/frame_focus = (ph/frame_LO) * (fr_LO / fr_focus) * scalePhotonsFocus"})]}),"\n"]})]}),"\n",(0,i.jsxs)(r.h2,{id:"format",children:["\ud83d\udcc4 File format (for ",(0,i.jsx)(r.code,{children:"File"}),"/",(0,i.jsx)(r.code,{children:"FileMono"}),")"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["The on-disk format is a ",(0,i.jsx)(r.strong,{children:"NumPy recarray"})," (historical, exported from an IDL structure)."]}),"\n",(0,i.jsx)(r.li,{children:"Each asterism entry contains per-star data (coordinates, magnitudes per band, flux)."}),"\n",(0,i.jsxs)(r.li,{children:["TipTop reads it with:","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"generateFromRecArrayMulti"})," (3-star mode)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"generateFromRecArray"})," (mono-star mode)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["Invalid asterisms (flux \u2264 0, out of FoV) are skipped; skipped fields are tracked in ",(0,i.jsx)(r.code,{children:"skippedFieldIndexes"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(r.h3,{id:"example-generating-a-npy-file",children:["Example: generating a ",(0,i.jsx)(r.code,{children:".npy"})," file"]}),"\n",(0,i.jsxs)(r.p,{children:["Below is a Python script to create a TipTop ",(0,i.jsx)(r.code,{children:"File"}),"/",(0,i.jsx)(r.code,{children:"FileMono"}),"-compatible recarray.",(0,i.jsx)(r.br,{}),"\n","It mimics the format expected by TipTop when using ",(0,i.jsx)(r.code,{children:"mode = File"})," (3-star asterisms, MAVIS-like) or ",(0,i.jsx)(r.code,{children:"mode = FileMono"})," (1-star asterisms, ERIS-like):"]}),"\n",(0,i.jsxs)(r.p,{children:["\u270f\ufe0f ",(0,i.jsx)(r.strong,{children:"Notes"})]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["The on-disk structure is the ",(0,i.jsxs)(r.strong,{children:["same for ",(0,i.jsx)(r.code,{children:"File"})," and ",(0,i.jsx)(r.code,{children:"FileMono"})]}),": a ",(0,i.jsx)(r.strong,{children:"0-D structured NumPy scalar"})," with fields ",(0,i.jsx)(r.code,{children:"N0..N{k-1}"}),". Each ",(0,i.jsx)(r.code,{children:"N#"})," holds ",(0,i.jsx)(r.strong,{children:"either"})," a recarray of asterisms ",(0,i.jsx)(r.strong,{children:"or"})," a small integer marker for a skipped field."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Each asterism stores arrays for 3 stars."})," In ",(0,i.jsx)(r.code,{children:"FileMono"}),", the ",(0,i.jsx)(r.em,{children:"reader"})," later applies the single-star logic; the file layout itself still contains 3-star entries."]}),"\n",(0,i.jsxs)(r.li,{children:["Values are ",(0,i.jsx)(r.strong,{children:"randomly generated"})," (for demo/testing). To make them reproducible, set a fixed RNG seed."]}),"\n",(0,i.jsxs)(r.li,{children:["Always load with ",(0,i.jsx)(r.code,{children:"allow_pickle=True"})," (inner fields are stored as ",(0,i.jsx)(r.code,{children:"object"})," pointing to ",(0,i.jsx)(r.code,{children:"ndarrays"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:" make_tiptop_file_recarray.py "})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"\"\"\"\r\nCreated on Wed Sep 03 13:37:33 2025\r\nMake TipTop File/FileMono-compatible recarray\r\n\r\n@author: astro-tiptop-services\r\n\"\"\"\r\n\r\n#%%\r\nimport numpy as np\r\n\r\n# -----------------------------------------------------------------------------\r\n# Inner dtype: one asterism = 3 stars. Each field is stored as \"object\"\r\n# (the actual value is a float32 ndarray). This mirrors the files used by\r\n# TipTop in mode=File / FileMono.\r\n#   COORD : float32 array of shape (2, 3)  -> X and Y for the 3 stars\r\n#   *MAG  : float32 array of shape (3,)    -> magnitudes per band  [R, I, J, H]\r\n#   FLUX* : float32 array of shape (3,)    -> flux per band\r\n# -----------------------------------------------------------------------------\r\nINNER_DTYPE = np.dtype([\r\n    (('coord','COORD'), object),  # ndarray float32 (2,3)\r\n    (('rmag','RMAG'),   object),  # ndarray float32 (3,)\r\n    (('imag','IMAG'),   object),\r\n    (('jmag','JMAG'),   object),\r\n    (('hmag','HMAG'),   object),\r\n    (('fluxr','FLUXR'), object),  # ndarray float32 (3,)\r\n    (('fluxi','FLUXI'), object),\r\n    (('fluxj','FLUXJ'), object),\r\n    (('fluxh','FLUXH'), object),\r\n])\r\n\r\ndef _mk_inner_recarray(n_asterisms: int, nstars: int = 3) -> np.recarray:\r\n    \"\"\"\r\n    Build the recarray for a single field (N#):\r\n    - n_asterisms entries (i.e., number of asterisms in that FoV)\r\n    - each asterism contains data for 'nstars' stars (fixed at 3 to match TipTop files)\r\n    \"\"\"\r\n    inner = np.recarray((n_asterisms,), dtype=INNER_DTYPE)\r\n    for i in range(n_asterisms):\r\n        # XY coordinates in arcsec (example values)\r\n        inner[i]['COORD'] = np.random.uniform(-60, 60, size=(2, nstars)).astype(np.float32)\r\n        # Magnitudes per band\r\n        for key in ('RMAG','IMAG','JMAG','HMAG'):\r\n            inner[i][key] = np.random.uniform(12, 22, size=(nstars,)).astype(np.float32)\r\n        # Flux per band\r\n        for key in ('FLUXR','FLUXI','FLUXJ','FLUXH'):\r\n            inner[i][key] = np.random.uniform(1e2, 1e6, size=(nstars,)).astype(np.float32)\r\n    return inner\r\n\r\ndef make_recarray(lengths_per_field, skip_fields=()):\r\n    \"\"\"\r\n    Create a **0-D structured scalar** with fields 'N0'..'N{K-1}'.\r\n    This exactly matches the structure expected by TipTop for mode=File/FileMono.\r\n\r\n    Args\r\n    ----\r\n    lengths_per_field : list[int]\r\n        Number of asterisms for each field (FoV), e.g. 10 values for N0..N9.\r\n    skip_fields : iterable[int]\r\n        Indices of fields to mark as \"skipped\" (stored as a small integer),\r\n        replicating the original files behavior.\r\n\r\n    Returns\r\n    -------\r\n    numpy.ndarray\r\n        A 0-D structured array. Access a field via root[()]['N0'].\r\n    \"\"\"\r\n    fields = [f\"N{i}\" for i in range(len(lengths_per_field))]\r\n    values = []\r\n    skip_set = set(skip_fields)\r\n    for idx, n_ast in enumerate(lengths_per_field):\r\n        if idx in skip_set or n_ast == 0:\r\n            # Skipped field marker (as seen in original files)\r\n            values.append(np.int16(0))          \r\n        else:\r\n            # Field contains a recarray of 'n_ast' asterisms (3 stars per asterism)\r\n            values.append(_mk_inner_recarray(n_ast, nstars=3))  \r\n    # Top-level 0-D structured scalar with object fields N0..N{K-1}\r\n    root_dtype = np.dtype([(f, object) for f in fields])\r\n    root = np.array(tuple(values), dtype=root_dtype)  # <- scalaire structur\xe9\r\n    return root  # shape () ; access with root[()]['N0']\r\n\r\n#%%----------------------------------------------------------------------------\r\n# EXAMPLES \r\n# -----------------------------------------------------------------------------\r\n# Multi (triplets) - same counts as rec_array10.npy\r\nlengths_multi = [1, 10, 64, 10, 22, 4, 10, 13, 7, 10]\r\nnp.save(\"rec_array10_like.npy\", make_recarray(lengths_multi))\r\n\r\n# \"Mono\" file (reader will treat it as mono later) - same counts as rec_array10_e.npy\r\nlengths_mono = [364, 220, 364, 120, 220, 84, 286, 120, 286, 165]\r\nnp.save(\"rec_array10_e_like.npy\", make_recarray(lengths_mono))\r\n\r\n#%%----------------------------------------------------------------------------\r\n# Load & inspect\r\n#------------------------------------------------------------------------------\r\nroot = np.load(\"rec_array10_like.npy\", allow_pickle=True)\r\n\r\n# get the recarray for field N3\r\nN3 = root[()]['N3']               # recarray of shape (n_asterisms,)\r\nprint(N3.dtype.names)             # ('COORD','RMAG','IMAG','JMAG','HMAG','FLUXR','FLUXI','FLUXJ','FLUXH')\r\n\r\n# first asterism\r\na0 = N3[0]\r\nprint(a0['COORD'].shape)          # (2, 3)\r\nprint(a0['JMAG'].shape)           # (3,)\r\nprint(a0['FLUXH'].dtype)          # float32\r\n\n"})})]}),"\n",(0,i.jsxs)(r.h2,{id:"\ufe0f-minimal-ini-examples",children:["\u27a1\ufe0f Minimal ",(0,i.jsx)(r.code,{children:".ini"})," examples"]}),"\n",(0,i.jsx)(r.h3,{id:"sets_mode",children:(0,i.jsx)(r.code,{children:"mode = 'Sets'"})}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)("strong",{children:[" ERIS - mode : ",(0,i.jsx)(r.code,{children:"Sets"})," "]})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"[ASTERSIM_SELECTION]\r\nmode = 'Sets'\r\nZenith = [[5], [20], [5], [7], [22], [17], [20], [17]]\r\nAzimuth = [[0.0], [45.0], [90.0], [60.0], [145.0], [190.0], [145.0], [90.0]]\r\nNumberPhotons = [[900], [21000], [190], [5100], [10800], [1800], [210], [180000]]\n"})})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)("strong",{children:[" MAVIS - mode : ",(0,i.jsx)(r.code,{children:"Sets"})," "]})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"[ASTERSIM_SELECTION]\r\nmode = 'Sets'\r\nZenith = [[10, 40, 30], [15, 45, 35], [10, 40, 35]]\r\nAzimuth = [[0.0, 45.0, 90.0], [60.0, 145.0, 190.0], [0.0, 45.0, 90.0]]\r\nNumberPhotons = [[1900, 2100, 1900], [1100, 1800, 1800], [1900, 2100, 1800]]\n"})})]}),"\n",(0,i.jsxs)(r.h3,{id:"single_mode",children:[(0,i.jsx)(r.code,{children:"mode = 'Singles1'"})," or ",(0,i.jsx)(r.code,{children:"mode = 'Singles3'"})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)("strong",{children:[" ERIS - mode : ",(0,i.jsx)(r.code,{children:"Single1"})," "]})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"[ASTERSIM_SELECTION]\r\nmode = 'Single1'\r\nZenith = [60.0, 40.0, 10.0, 50.0, 30.0, 20.0, 10.0]\r\nAzimuth = [0.0, 45.0, 95.0, 135.0, 190.0, 242.0, 177.0]\r\nNumberPhotons = [1900, 1800, 700, 2000, 200, 1110, 400]\r\nFrequencies = [250, 250, 500, 250, 500, 100, 100]\r\ntransmissionFactor = 0.344\r\nbands = ['R', 'I']\n"})})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)("strong",{children:[" MAVIS - mode : ",(0,i.jsx)(r.code,{children:"Single3"})," "]})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"[ASTERSIM_SELECTION]\r\nmode = 'Singles3'\r\nZenith = [60.0, 40, 10, 50, 30, 20, 10]\r\nAzimuth = [0.0, 45, 95, 135, 190, 242, 177]\r\nNumberPhotons = [1900, 1800, 700, 2000, 200, 1110, 400]\r\nFrequencies = [300, 300, 300, 300, 300, 300, 300]\r\ntransmissionFactor = 0.22\r\nbands = ['J', 'H']\n"})})]}),"\n",(0,i.jsx)(r.h3,{id:"generate_mode",children:(0,i.jsx)(r.code,{children:"mode = 'Generate'"})}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)("strong",{children:[" ERIS - mode : ",(0,i.jsx)(r.code,{children:"Generate"})," "]})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"[ASTERSIM_SELECTION]\r\nmode = 'Generate'\r\nZenith = [60.0]\r\nAzimuth = [0.0]\r\nNumberPhotons = [1900]\n"})})]}),"\n",(0,i.jsx)(r.h3,{id:"file_mode",children:(0,i.jsx)(r.code,{children:"mode = 'File'"})}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)("strong",{children:[" MAVIS - mode : ",(0,i.jsx)(r.code,{children:"File"})," "]})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"[ASTERSIM_SELECTION]\r\nmode = 'File'\r\nfilename = 'astTest/rec_array1000.npy'\r\nfieldsNumber = 10\r\noffset = 0\r\nZenith = [60]\r\nAzimuth = [0.0]\r\nNumberPhotons = [1900]\r\ntransmissionFactor = 0.22\r\nbands = ['J', 'H']\n"})})]}),"\n",(0,i.jsx)(r.h3,{id:"filemono_mode",children:(0,i.jsx)(r.code,{children:"mode = 'FileMono'"})}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsxs)("strong",{children:[" ERIS - mode : ",(0,i.jsx)(r.code,{children:"FileMono"})," "]})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"[ASTERSIM_SELECTION]\r\nmode = 'FileMono'\r\nfilename = 'astTest/rec_array1000_e.npy'\r\nfieldsNumber = 10\r\noffset = 0\r\nZenith = [60]\r\nAzimuth = [0.0]\r\nNumberPhotons = [1900]\r\ntransmissionFactor = 0.334\r\nbands = ['R', 'I']\n"})})]}),"\n",(0,i.jsxs)(r.p,{children:["\ud83d\udca1 Complete .ini files are available in the astTest directory of our ",(0,i.jsx)(r.a,{href:"https://github.com/astro-tiptop/TIPTOP/tree/main/tiptop/astTest",children:(0,i.jsx)(r.strong,{children:"GitHub repository"})}),"."]})]})}function h(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>d});var n=s(6540);const i={},l=n.createContext(i);function t(e){const r=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),n.createElement(l.Provider,{value:r},e.children)}}}]);